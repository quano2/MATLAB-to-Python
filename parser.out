Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> top
Rule 1     top -> <empty>
Rule 2     top -> stmt_list
Rule 3     top -> top func_decl stmt_list_opt
Rule 4     top -> top func_decl end semi_opt
Rule 5     top -> top func_decl stmt_list end semi_opt
Rule 6     semi_opt -> <empty>
Rule 7     semi_opt -> semi_opt SEMI
Rule 8     semi_opt -> semi_opt COMMA
Rule 9     stmt -> continue_stmt
Rule 10    stmt -> break_stmt
Rule 11    stmt -> expr_stmt
Rule 12    stmt -> global_stmt
Rule 13    stmt -> command
Rule 14    stmt -> for_stmt
Rule 15    stmt -> if_stmt
Rule 16    stmt -> null_stmt
Rule 17    stmt -> return_stmt
Rule 18    stmt -> switch_stmt
Rule 19    stmt -> try_catch
Rule 20    stmt -> while_stmt
Rule 21    arg1 -> STRING
Rule 22    arg1 -> NUMBER
Rule 23    arg1 -> IDENTIFIER
Rule 24    arg1 -> GLOBAL
Rule 25    args -> arg1
Rule 26    args -> args arg1
Rule 27    command -> IDENTIFIER args SEMI
Rule 28    global_list -> IDENTIFIER
Rule 29    global_list -> global_list IDENTIFIER
Rule 30    global_stmt -> GLOBAL global_list SEMI
Rule 31    global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI
Rule 32    return_stmt -> RETURN SEMI
Rule 33    continue_stmt -> CONTINUE SEMI
Rule 34    break_stmt -> BREAK SEMI
Rule 35    switch_stmt -> SWITCH expr semi_opt case_list end
Rule 36    case_list -> <empty>
Rule 37    case_list -> CASE expr sep stmt_list_opt case_list
Rule 38    case_list -> CASE expr error stmt_list_opt case_list
Rule 39    case_list -> OTHERWISE stmt_list
Rule 40    try_catch -> TRY stmt_list CATCH stmt_list end
Rule 41    try_catch -> TRY stmt_list end
Rule 42    null_stmt -> SEMI
Rule 43    null_stmt -> COMMA
Rule 44    func_decl -> FUNCTION IDENTIFIER args_opt SEMI
Rule 45    func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI
Rule 46    args_opt -> <empty>
Rule 47    args_opt -> LBRACKET RBRACKET
Rule 48    args_opt -> LBRACKET expr_list RBRACKET
Rule 49    ret -> IDENTIFIER
Rule 50    ret -> LBRACKET RBRACKET
Rule 51    ret -> LBRACKET expr_list RBRACKET
Rule 52    stmt_list_opt -> <empty>
Rule 53    stmt_list_opt -> stmt_list
Rule 54    stmt_list -> stmt
Rule 55    stmt_list -> stmt_list stmt
Rule 56    concat_list -> expr_list SEMI expr_list
Rule 57    concat_list -> concat_list SEMI expr_list
Rule 58    expr_list -> exprs
Rule 59    expr_list -> exprs COMMA
Rule 60    exprs -> expr
Rule 61    exprs -> exprs COMMA expr
Rule 62    expr_stmt -> expr_list SEMI
Rule 63    while_stmt -> WHILE expr SEMI stmt_list end
Rule 64    sep -> COMMA
Rule 65    sep -> SEMI
Rule 66    if_stmt -> IF expr sep stmt_list_opt elseif_stmt end
Rule 67    if_stmt -> IF expr error stmt_list_opt elseif_stmt end
Rule 68    elseif_stmt -> <empty>
Rule 69    elseif_stmt -> ELSE stmt_list_opt
Rule 70    elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt
Rule 71    for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end
Rule 72    for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
Rule 73    for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end
Rule 74    number -> NUMBER
Rule 75    expr -> IDENTIFIER
Rule 76    expr -> number
Rule 77    expr -> string
Rule 78    expr -> colon
Rule 79    expr -> NOTEQUAL
Rule 80    expr -> NOT
Rule 81    expr -> matrix
Rule 82    expr -> cellarray
Rule 83    expr -> expr2
Rule 84    expr -> expr1
Rule 85    end -> END
Rule 86    string -> STRING
Rule 87    colon -> COLON
Rule 88    expr1 -> MINUS expr
Rule 89    expr1 -> PLUS expr
Rule 90    expr1 -> NOTEQUAL expr
Rule 91    cellarray -> LBRACE RBRACE
Rule 92    cellarray -> LBRACE expr_list RBRACE
Rule 93    cellarray -> LBRACE concat_list RBRACE
Rule 94    cellarray -> LBRACE concat_list SEMI RBRACE
Rule 95    matrix -> LBRACKET RBRACKET
Rule 96    matrix -> LBRACKET concat_list RBRACKET
Rule 97    matrix -> LBRACKET concat_list SEMI RBRACKET
Rule 98    matrix -> LBRACKET expr_list RBRACKET
Rule 99    matrix -> LBRACKET expr_list SEMI RBRACKET
Rule 100   expr -> LBRACKET expr RBRACKET
Rule 101   expr -> expr FIELD
Rule 102   expr -> expr TRANSPOSE
Rule 103   expr -> expr LBRACE expr_list RBRACE
Rule 104   expr -> expr LBRACE RBRACE
Rule 105   expr -> expr LBRACKET expr_list RBRACKET
Rule 106   expr -> expr LBRACKET RBRACKET
Rule 107   expr2 -> expr AND expr
Rule 108   expr2 -> expr ANDAND expr
Rule 109   expr2 -> expr LDIV expr
Rule 110   expr2 -> expr COLON expr
Rule 111   expr2 -> expr DIV expr
Rule 112   expr2 -> expr DOT expr
Rule 113   expr2 -> expr DOTDIV expr
Rule 114   expr2 -> expr DOTEXP expr
Rule 115   expr2 -> expr DOTMUL expr
Rule 116   expr2 -> expr EQUALEQUAL expr
Rule 117   expr2 -> expr EXP expr
Rule 118   expr2 -> expr GREATEREQUAL expr
Rule 119   expr2 -> expr GREATERTHAN expr
Rule 120   expr2 -> expr LESSEQUAL expr
Rule 121   expr2 -> expr LESSTHAN expr
Rule 122   expr2 -> expr MINUS expr
Rule 123   expr2 -> expr TIMES expr
Rule 124   expr2 -> expr NOTEQUAL expr
Rule 125   expr2 -> expr OR expr
Rule 126   expr2 -> expr OROR expr
Rule 127   expr2 -> expr PLUS expr
Rule 128   expr2 -> expr EQUALS expr
Rule 129   expr2 -> expr OREQUALS expr

Terminals, with rules where they appear

AND                  : 107
ANDAND               : 108
BREAK                : 34
CASE                 : 37 38
CATCH                : 40
COLON                : 87 110
COMMA                : 8 43 59 61 64
CONTINUE             : 33
DIV                  : 111
DOT                  : 112
DOTDIV               : 113
DOTEXP               : 114
DOTMUL               : 115
ELSE                 : 69
ELSEIF               : 70
END                  : 85
EQUALEQUAL           : 116
EQUALS               : 31 45 71 72 73 128
EXP                  : 117
FIELD                : 101
FOR                  : 71 72 73
FUNCTION             : 44 45
GLOBAL               : 24 30 31
GREATEREQUAL         : 118
GREATERTHAN          : 119
IDENTIFIER           : 23 27 28 29 31 44 45 49 71 72 75
IF                   : 66 67
LBRACE               : 91 92 93 94 103 104
LBRACKET             : 47 48 50 51 72 95 96 97 98 99 100 105 106
LDIV                 : 109
LESSEQUAL            : 120
LESSTHAN             : 121
MINUS                : 88 122
NOT                  : 80
NOTEQUAL             : 79 90 124
NUMBER               : 22 74
OR                   : 125
OREQUALS             : 129
OROR                 : 126
OTHERWISE            : 39
PLUS                 : 89 127
RBRACE               : 91 92 93 94 103 104
RBRACKET             : 47 48 50 51 72 95 96 97 98 99 100 105 106
RETURN               : 32
SEMI                 : 7 27 30 31 32 33 34 42 44 45 56 57 62 63 65 71 72 73 94 97 99
STRING               : 21 86
SWITCH               : 35
TIMES                : 123
TRANSPOSE            : 102
TRY                  : 40 41
WHILE                : 63
error                : 38 67

Nonterminals, with rules where they appear

arg1                 : 25 26
args                 : 26 27
args_opt             : 44 45
break_stmt           : 10
case_list            : 35 37 38
cellarray            : 82
colon                : 78
command              : 13
concat_list          : 57 93 94 96 97
continue_stmt        : 9
elseif_stmt          : 66 67 70
end                  : 4 5 35 40 41 63 66 67 71 72 73
expr                 : 31 35 37 38 60 61 63 66 67 70 71 72 73 88 89 90 100 101 102 103 104 105 106 107 107 108 108 109 109 110 110 111 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 121 122 122 123 123 124 124 125 125 126 126 127 127 128 128 129 129
expr1                : 84
expr2                : 83
expr_list            : 48 51 56 56 57 62 92 98 99 103 105
expr_stmt            : 11
exprs                : 58 59 61
for_stmt             : 14
func_decl            : 3 4 5
global_list          : 29 30
global_stmt          : 12
if_stmt              : 15
matrix               : 73 81
null_stmt            : 16
number               : 76
ret                  : 45
return_stmt          : 17
semi_opt             : 4 5 7 8 35
sep                  : 37 66 70
stmt                 : 54 55
stmt_list            : 2 5 39 40 40 41 53 55 63 71 72 73
stmt_list_opt        : 3 37 38 66 67 69 70
string               : 77
switch_stmt          : 18
top                  : 3 4 5 0
try_catch            : 19
while_stmt           : 20

Parsing method: LALR

state 0

    (0) S' -> . top
    (1) top -> .
    (2) top -> . stmt_list
    (3) top -> . top func_decl stmt_list_opt
    (4) top -> . top func_decl end semi_opt
    (5) top -> . top func_decl stmt_list end semi_opt
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    FUNCTION        reduce using rule 1 (top -> .)
    $end            reduce using rule 1 (top -> .)
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    top                            shift and go to state 27
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 6
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    while_stmt                     shift and go to state 18

state 1

    (60) exprs -> expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    COMMA           reduce using rule 60 (exprs -> expr .)
    SEMI            reduce using rule 60 (exprs -> expr .)
    RBRACE          reduce using rule 60 (exprs -> expr .)
    RBRACKET        reduce using rule 60 (exprs -> expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57


state 2

    (58) expr_list -> exprs .
    (59) expr_list -> exprs . COMMA
    (61) exprs -> exprs . COMMA expr

    SEMI            reduce using rule 58 (expr_list -> exprs .)
    RBRACKET        reduce using rule 58 (expr_list -> exprs .)
    RBRACE          reduce using rule 58 (expr_list -> exprs .)
    COMMA           shift and go to state 74


state 3

    (82) expr -> cellarray .

    FIELD           reduce using rule 82 (expr -> cellarray .)
    TRANSPOSE       reduce using rule 82 (expr -> cellarray .)
    LBRACE          reduce using rule 82 (expr -> cellarray .)
    LBRACKET        reduce using rule 82 (expr -> cellarray .)
    AND             reduce using rule 82 (expr -> cellarray .)
    ANDAND          reduce using rule 82 (expr -> cellarray .)
    LDIV            reduce using rule 82 (expr -> cellarray .)
    COLON           reduce using rule 82 (expr -> cellarray .)
    DIV             reduce using rule 82 (expr -> cellarray .)
    DOT             reduce using rule 82 (expr -> cellarray .)
    DOTDIV          reduce using rule 82 (expr -> cellarray .)
    DOTEXP          reduce using rule 82 (expr -> cellarray .)
    DOTMUL          reduce using rule 82 (expr -> cellarray .)
    EQUALEQUAL      reduce using rule 82 (expr -> cellarray .)
    EXP             reduce using rule 82 (expr -> cellarray .)
    GREATEREQUAL    reduce using rule 82 (expr -> cellarray .)
    GREATERTHAN     reduce using rule 82 (expr -> cellarray .)
    LESSEQUAL       reduce using rule 82 (expr -> cellarray .)
    LESSTHAN        reduce using rule 82 (expr -> cellarray .)
    MINUS           reduce using rule 82 (expr -> cellarray .)
    TIMES           reduce using rule 82 (expr -> cellarray .)
    NOTEQUAL        reduce using rule 82 (expr -> cellarray .)
    OR              reduce using rule 82 (expr -> cellarray .)
    OROR            reduce using rule 82 (expr -> cellarray .)
    PLUS            reduce using rule 82 (expr -> cellarray .)
    EQUALS          reduce using rule 82 (expr -> cellarray .)
    OREQUALS        reduce using rule 82 (expr -> cellarray .)
    COMMA           reduce using rule 82 (expr -> cellarray .)
    RBRACE          reduce using rule 82 (expr -> cellarray .)
    SEMI            reduce using rule 82 (expr -> cellarray .)
    CASE            reduce using rule 82 (expr -> cellarray .)
    OTHERWISE       reduce using rule 82 (expr -> cellarray .)
    END             reduce using rule 82 (expr -> cellarray .)
    error           reduce using rule 82 (expr -> cellarray .)
    RBRACKET        reduce using rule 82 (expr -> cellarray .)


state 4

    (10) stmt -> break_stmt .

    CONTINUE        reduce using rule 10 (stmt -> break_stmt .)
    BREAK           reduce using rule 10 (stmt -> break_stmt .)
    GLOBAL          reduce using rule 10 (stmt -> break_stmt .)
    IDENTIFIER      reduce using rule 10 (stmt -> break_stmt .)
    FOR             reduce using rule 10 (stmt -> break_stmt .)
    IF              reduce using rule 10 (stmt -> break_stmt .)
    SEMI            reduce using rule 10 (stmt -> break_stmt .)
    COMMA           reduce using rule 10 (stmt -> break_stmt .)
    RETURN          reduce using rule 10 (stmt -> break_stmt .)
    SWITCH          reduce using rule 10 (stmt -> break_stmt .)
    TRY             reduce using rule 10 (stmt -> break_stmt .)
    WHILE           reduce using rule 10 (stmt -> break_stmt .)
    NOTEQUAL        reduce using rule 10 (stmt -> break_stmt .)
    NOT             reduce using rule 10 (stmt -> break_stmt .)
    LBRACKET        reduce using rule 10 (stmt -> break_stmt .)
    NUMBER          reduce using rule 10 (stmt -> break_stmt .)
    STRING          reduce using rule 10 (stmt -> break_stmt .)
    COLON           reduce using rule 10 (stmt -> break_stmt .)
    LBRACE          reduce using rule 10 (stmt -> break_stmt .)
    MINUS           reduce using rule 10 (stmt -> break_stmt .)
    PLUS            reduce using rule 10 (stmt -> break_stmt .)
    CASE            reduce using rule 10 (stmt -> break_stmt .)
    OTHERWISE       reduce using rule 10 (stmt -> break_stmt .)
    END             reduce using rule 10 (stmt -> break_stmt .)
    FUNCTION        reduce using rule 10 (stmt -> break_stmt .)
    $end            reduce using rule 10 (stmt -> break_stmt .)
    CATCH           reduce using rule 10 (stmt -> break_stmt .)
    ELSE            reduce using rule 10 (stmt -> break_stmt .)
    ELSEIF          reduce using rule 10 (stmt -> break_stmt .)


state 5

    (17) stmt -> return_stmt .

    CONTINUE        reduce using rule 17 (stmt -> return_stmt .)
    BREAK           reduce using rule 17 (stmt -> return_stmt .)
    GLOBAL          reduce using rule 17 (stmt -> return_stmt .)
    IDENTIFIER      reduce using rule 17 (stmt -> return_stmt .)
    FOR             reduce using rule 17 (stmt -> return_stmt .)
    IF              reduce using rule 17 (stmt -> return_stmt .)
    SEMI            reduce using rule 17 (stmt -> return_stmt .)
    COMMA           reduce using rule 17 (stmt -> return_stmt .)
    RETURN          reduce using rule 17 (stmt -> return_stmt .)
    SWITCH          reduce using rule 17 (stmt -> return_stmt .)
    TRY             reduce using rule 17 (stmt -> return_stmt .)
    WHILE           reduce using rule 17 (stmt -> return_stmt .)
    NOTEQUAL        reduce using rule 17 (stmt -> return_stmt .)
    NOT             reduce using rule 17 (stmt -> return_stmt .)
    LBRACKET        reduce using rule 17 (stmt -> return_stmt .)
    NUMBER          reduce using rule 17 (stmt -> return_stmt .)
    STRING          reduce using rule 17 (stmt -> return_stmt .)
    COLON           reduce using rule 17 (stmt -> return_stmt .)
    LBRACE          reduce using rule 17 (stmt -> return_stmt .)
    MINUS           reduce using rule 17 (stmt -> return_stmt .)
    PLUS            reduce using rule 17 (stmt -> return_stmt .)
    CASE            reduce using rule 17 (stmt -> return_stmt .)
    OTHERWISE       reduce using rule 17 (stmt -> return_stmt .)
    END             reduce using rule 17 (stmt -> return_stmt .)
    FUNCTION        reduce using rule 17 (stmt -> return_stmt .)
    $end            reduce using rule 17 (stmt -> return_stmt .)
    CATCH           reduce using rule 17 (stmt -> return_stmt .)
    ELSE            reduce using rule 17 (stmt -> return_stmt .)
    ELSEIF          reduce using rule 17 (stmt -> return_stmt .)


state 6

    (2) top -> stmt_list .
    (55) stmt_list -> stmt_list . stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    FUNCTION        reduce using rule 2 (top -> stmt_list .)
    $end            reduce using rule 2 (top -> stmt_list .)
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 75
    null_stmt                      shift and go to state 44
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    continue_stmt                  shift and go to state 42
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 7

    (14) stmt -> for_stmt .

    CONTINUE        reduce using rule 14 (stmt -> for_stmt .)
    BREAK           reduce using rule 14 (stmt -> for_stmt .)
    GLOBAL          reduce using rule 14 (stmt -> for_stmt .)
    IDENTIFIER      reduce using rule 14 (stmt -> for_stmt .)
    FOR             reduce using rule 14 (stmt -> for_stmt .)
    IF              reduce using rule 14 (stmt -> for_stmt .)
    SEMI            reduce using rule 14 (stmt -> for_stmt .)
    COMMA           reduce using rule 14 (stmt -> for_stmt .)
    RETURN          reduce using rule 14 (stmt -> for_stmt .)
    SWITCH          reduce using rule 14 (stmt -> for_stmt .)
    TRY             reduce using rule 14 (stmt -> for_stmt .)
    WHILE           reduce using rule 14 (stmt -> for_stmt .)
    NOTEQUAL        reduce using rule 14 (stmt -> for_stmt .)
    NOT             reduce using rule 14 (stmt -> for_stmt .)
    LBRACKET        reduce using rule 14 (stmt -> for_stmt .)
    NUMBER          reduce using rule 14 (stmt -> for_stmt .)
    STRING          reduce using rule 14 (stmt -> for_stmt .)
    COLON           reduce using rule 14 (stmt -> for_stmt .)
    LBRACE          reduce using rule 14 (stmt -> for_stmt .)
    MINUS           reduce using rule 14 (stmt -> for_stmt .)
    PLUS            reduce using rule 14 (stmt -> for_stmt .)
    CASE            reduce using rule 14 (stmt -> for_stmt .)
    OTHERWISE       reduce using rule 14 (stmt -> for_stmt .)
    END             reduce using rule 14 (stmt -> for_stmt .)
    FUNCTION        reduce using rule 14 (stmt -> for_stmt .)
    $end            reduce using rule 14 (stmt -> for_stmt .)
    CATCH           reduce using rule 14 (stmt -> for_stmt .)
    ELSE            reduce using rule 14 (stmt -> for_stmt .)
    ELSEIF          reduce using rule 14 (stmt -> for_stmt .)


state 8

    (40) try_catch -> TRY . stmt_list CATCH stmt_list end
    (41) try_catch -> TRY . stmt_list end
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 76
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    null_stmt                      shift and go to state 44
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    continue_stmt                  shift and go to state 42
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 9

    (63) while_stmt -> WHILE . expr SEMI stmt_list end
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 77
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    string                         shift and go to state 38
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 10

    (43) null_stmt -> COMMA .

    CONTINUE        reduce using rule 43 (null_stmt -> COMMA .)
    BREAK           reduce using rule 43 (null_stmt -> COMMA .)
    GLOBAL          reduce using rule 43 (null_stmt -> COMMA .)
    IDENTIFIER      reduce using rule 43 (null_stmt -> COMMA .)
    FOR             reduce using rule 43 (null_stmt -> COMMA .)
    IF              reduce using rule 43 (null_stmt -> COMMA .)
    SEMI            reduce using rule 43 (null_stmt -> COMMA .)
    COMMA           reduce using rule 43 (null_stmt -> COMMA .)
    RETURN          reduce using rule 43 (null_stmt -> COMMA .)
    SWITCH          reduce using rule 43 (null_stmt -> COMMA .)
    TRY             reduce using rule 43 (null_stmt -> COMMA .)
    WHILE           reduce using rule 43 (null_stmt -> COMMA .)
    NOTEQUAL        reduce using rule 43 (null_stmt -> COMMA .)
    NOT             reduce using rule 43 (null_stmt -> COMMA .)
    LBRACKET        reduce using rule 43 (null_stmt -> COMMA .)
    NUMBER          reduce using rule 43 (null_stmt -> COMMA .)
    STRING          reduce using rule 43 (null_stmt -> COMMA .)
    COLON           reduce using rule 43 (null_stmt -> COMMA .)
    LBRACE          reduce using rule 43 (null_stmt -> COMMA .)
    MINUS           reduce using rule 43 (null_stmt -> COMMA .)
    PLUS            reduce using rule 43 (null_stmt -> COMMA .)
    ELSE            reduce using rule 43 (null_stmt -> COMMA .)
    ELSEIF          reduce using rule 43 (null_stmt -> COMMA .)
    END             reduce using rule 43 (null_stmt -> COMMA .)
    CASE            reduce using rule 43 (null_stmt -> COMMA .)
    OTHERWISE       reduce using rule 43 (null_stmt -> COMMA .)
    FUNCTION        reduce using rule 43 (null_stmt -> COMMA .)
    $end            reduce using rule 43 (null_stmt -> COMMA .)
    CATCH           reduce using rule 43 (null_stmt -> COMMA .)


state 11

    (11) stmt -> expr_stmt .

    CONTINUE        reduce using rule 11 (stmt -> expr_stmt .)
    BREAK           reduce using rule 11 (stmt -> expr_stmt .)
    GLOBAL          reduce using rule 11 (stmt -> expr_stmt .)
    IDENTIFIER      reduce using rule 11 (stmt -> expr_stmt .)
    FOR             reduce using rule 11 (stmt -> expr_stmt .)
    IF              reduce using rule 11 (stmt -> expr_stmt .)
    SEMI            reduce using rule 11 (stmt -> expr_stmt .)
    COMMA           reduce using rule 11 (stmt -> expr_stmt .)
    RETURN          reduce using rule 11 (stmt -> expr_stmt .)
    SWITCH          reduce using rule 11 (stmt -> expr_stmt .)
    TRY             reduce using rule 11 (stmt -> expr_stmt .)
    WHILE           reduce using rule 11 (stmt -> expr_stmt .)
    NOTEQUAL        reduce using rule 11 (stmt -> expr_stmt .)
    NOT             reduce using rule 11 (stmt -> expr_stmt .)
    LBRACKET        reduce using rule 11 (stmt -> expr_stmt .)
    NUMBER          reduce using rule 11 (stmt -> expr_stmt .)
    STRING          reduce using rule 11 (stmt -> expr_stmt .)
    COLON           reduce using rule 11 (stmt -> expr_stmt .)
    LBRACE          reduce using rule 11 (stmt -> expr_stmt .)
    MINUS           reduce using rule 11 (stmt -> expr_stmt .)
    PLUS            reduce using rule 11 (stmt -> expr_stmt .)
    CASE            reduce using rule 11 (stmt -> expr_stmt .)
    OTHERWISE       reduce using rule 11 (stmt -> expr_stmt .)
    END             reduce using rule 11 (stmt -> expr_stmt .)
    FUNCTION        reduce using rule 11 (stmt -> expr_stmt .)
    $end            reduce using rule 11 (stmt -> expr_stmt .)
    CATCH           reduce using rule 11 (stmt -> expr_stmt .)
    ELSE            reduce using rule 11 (stmt -> expr_stmt .)
    ELSEIF          reduce using rule 11 (stmt -> expr_stmt .)


state 12

    (15) stmt -> if_stmt .

    CONTINUE        reduce using rule 15 (stmt -> if_stmt .)
    BREAK           reduce using rule 15 (stmt -> if_stmt .)
    GLOBAL          reduce using rule 15 (stmt -> if_stmt .)
    IDENTIFIER      reduce using rule 15 (stmt -> if_stmt .)
    FOR             reduce using rule 15 (stmt -> if_stmt .)
    IF              reduce using rule 15 (stmt -> if_stmt .)
    SEMI            reduce using rule 15 (stmt -> if_stmt .)
    COMMA           reduce using rule 15 (stmt -> if_stmt .)
    RETURN          reduce using rule 15 (stmt -> if_stmt .)
    SWITCH          reduce using rule 15 (stmt -> if_stmt .)
    TRY             reduce using rule 15 (stmt -> if_stmt .)
    WHILE           reduce using rule 15 (stmt -> if_stmt .)
    NOTEQUAL        reduce using rule 15 (stmt -> if_stmt .)
    NOT             reduce using rule 15 (stmt -> if_stmt .)
    LBRACKET        reduce using rule 15 (stmt -> if_stmt .)
    NUMBER          reduce using rule 15 (stmt -> if_stmt .)
    STRING          reduce using rule 15 (stmt -> if_stmt .)
    COLON           reduce using rule 15 (stmt -> if_stmt .)
    LBRACE          reduce using rule 15 (stmt -> if_stmt .)
    MINUS           reduce using rule 15 (stmt -> if_stmt .)
    PLUS            reduce using rule 15 (stmt -> if_stmt .)
    CASE            reduce using rule 15 (stmt -> if_stmt .)
    OTHERWISE       reduce using rule 15 (stmt -> if_stmt .)
    END             reduce using rule 15 (stmt -> if_stmt .)
    FUNCTION        reduce using rule 15 (stmt -> if_stmt .)
    $end            reduce using rule 15 (stmt -> if_stmt .)
    CATCH           reduce using rule 15 (stmt -> if_stmt .)
    ELSE            reduce using rule 15 (stmt -> if_stmt .)
    ELSEIF          reduce using rule 15 (stmt -> if_stmt .)


state 13

    (54) stmt_list -> stmt .

    CONTINUE        reduce using rule 54 (stmt_list -> stmt .)
    BREAK           reduce using rule 54 (stmt_list -> stmt .)
    GLOBAL          reduce using rule 54 (stmt_list -> stmt .)
    IDENTIFIER      reduce using rule 54 (stmt_list -> stmt .)
    FOR             reduce using rule 54 (stmt_list -> stmt .)
    IF              reduce using rule 54 (stmt_list -> stmt .)
    SEMI            reduce using rule 54 (stmt_list -> stmt .)
    COMMA           reduce using rule 54 (stmt_list -> stmt .)
    RETURN          reduce using rule 54 (stmt_list -> stmt .)
    SWITCH          reduce using rule 54 (stmt_list -> stmt .)
    TRY             reduce using rule 54 (stmt_list -> stmt .)
    WHILE           reduce using rule 54 (stmt_list -> stmt .)
    NOTEQUAL        reduce using rule 54 (stmt_list -> stmt .)
    NOT             reduce using rule 54 (stmt_list -> stmt .)
    LBRACKET        reduce using rule 54 (stmt_list -> stmt .)
    NUMBER          reduce using rule 54 (stmt_list -> stmt .)
    STRING          reduce using rule 54 (stmt_list -> stmt .)
    COLON           reduce using rule 54 (stmt_list -> stmt .)
    LBRACE          reduce using rule 54 (stmt_list -> stmt .)
    MINUS           reduce using rule 54 (stmt_list -> stmt .)
    PLUS            reduce using rule 54 (stmt_list -> stmt .)
    CASE            reduce using rule 54 (stmt_list -> stmt .)
    OTHERWISE       reduce using rule 54 (stmt_list -> stmt .)
    END             reduce using rule 54 (stmt_list -> stmt .)
    FUNCTION        reduce using rule 54 (stmt_list -> stmt .)
    $end            reduce using rule 54 (stmt_list -> stmt .)
    ELSE            reduce using rule 54 (stmt_list -> stmt .)
    ELSEIF          reduce using rule 54 (stmt_list -> stmt .)
    CATCH           reduce using rule 54 (stmt_list -> stmt .)


state 14

    (33) continue_stmt -> CONTINUE . SEMI

    SEMI            shift and go to state 79


state 15

    (91) cellarray -> LBRACE . RBRACE
    (92) cellarray -> LBRACE . expr_list RBRACE
    (93) cellarray -> LBRACE . concat_list RBRACE
    (94) cellarray -> LBRACE . concat_list SEMI RBRACE
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (56) concat_list -> . expr_list SEMI expr_list
    (57) concat_list -> . concat_list SEMI expr_list
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    RBRACE          shift and go to state 80
    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 1
    string                         shift and go to state 38
    expr1                          shift and go to state 43
    colon                          shift and go to state 16
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    expr_list                      shift and go to state 82
    concat_list                    shift and go to state 81
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 16

    (78) expr -> colon .

    FIELD           reduce using rule 78 (expr -> colon .)
    TRANSPOSE       reduce using rule 78 (expr -> colon .)
    LBRACE          reduce using rule 78 (expr -> colon .)
    LBRACKET        reduce using rule 78 (expr -> colon .)
    AND             reduce using rule 78 (expr -> colon .)
    ANDAND          reduce using rule 78 (expr -> colon .)
    LDIV            reduce using rule 78 (expr -> colon .)
    COLON           reduce using rule 78 (expr -> colon .)
    DIV             reduce using rule 78 (expr -> colon .)
    DOT             reduce using rule 78 (expr -> colon .)
    DOTDIV          reduce using rule 78 (expr -> colon .)
    DOTEXP          reduce using rule 78 (expr -> colon .)
    DOTMUL          reduce using rule 78 (expr -> colon .)
    EQUALEQUAL      reduce using rule 78 (expr -> colon .)
    EXP             reduce using rule 78 (expr -> colon .)
    GREATEREQUAL    reduce using rule 78 (expr -> colon .)
    GREATERTHAN     reduce using rule 78 (expr -> colon .)
    LESSEQUAL       reduce using rule 78 (expr -> colon .)
    LESSTHAN        reduce using rule 78 (expr -> colon .)
    MINUS           reduce using rule 78 (expr -> colon .)
    TIMES           reduce using rule 78 (expr -> colon .)
    NOTEQUAL        reduce using rule 78 (expr -> colon .)
    OR              reduce using rule 78 (expr -> colon .)
    OROR            reduce using rule 78 (expr -> colon .)
    PLUS            reduce using rule 78 (expr -> colon .)
    EQUALS          reduce using rule 78 (expr -> colon .)
    OREQUALS        reduce using rule 78 (expr -> colon .)
    COMMA           reduce using rule 78 (expr -> colon .)
    RBRACE          reduce using rule 78 (expr -> colon .)
    SEMI            reduce using rule 78 (expr -> colon .)
    CASE            reduce using rule 78 (expr -> colon .)
    OTHERWISE       reduce using rule 78 (expr -> colon .)
    END             reduce using rule 78 (expr -> colon .)
    error           reduce using rule 78 (expr -> colon .)
    RBRACKET        reduce using rule 78 (expr -> colon .)


state 17

    (13) stmt -> command .

    CONTINUE        reduce using rule 13 (stmt -> command .)
    BREAK           reduce using rule 13 (stmt -> command .)
    GLOBAL          reduce using rule 13 (stmt -> command .)
    IDENTIFIER      reduce using rule 13 (stmt -> command .)
    FOR             reduce using rule 13 (stmt -> command .)
    IF              reduce using rule 13 (stmt -> command .)
    SEMI            reduce using rule 13 (stmt -> command .)
    COMMA           reduce using rule 13 (stmt -> command .)
    RETURN          reduce using rule 13 (stmt -> command .)
    SWITCH          reduce using rule 13 (stmt -> command .)
    TRY             reduce using rule 13 (stmt -> command .)
    WHILE           reduce using rule 13 (stmt -> command .)
    NOTEQUAL        reduce using rule 13 (stmt -> command .)
    NOT             reduce using rule 13 (stmt -> command .)
    LBRACKET        reduce using rule 13 (stmt -> command .)
    NUMBER          reduce using rule 13 (stmt -> command .)
    STRING          reduce using rule 13 (stmt -> command .)
    COLON           reduce using rule 13 (stmt -> command .)
    LBRACE          reduce using rule 13 (stmt -> command .)
    MINUS           reduce using rule 13 (stmt -> command .)
    PLUS            reduce using rule 13 (stmt -> command .)
    CASE            reduce using rule 13 (stmt -> command .)
    OTHERWISE       reduce using rule 13 (stmt -> command .)
    END             reduce using rule 13 (stmt -> command .)
    FUNCTION        reduce using rule 13 (stmt -> command .)
    $end            reduce using rule 13 (stmt -> command .)
    CATCH           reduce using rule 13 (stmt -> command .)
    ELSE            reduce using rule 13 (stmt -> command .)
    ELSEIF          reduce using rule 13 (stmt -> command .)


state 18

    (20) stmt -> while_stmt .

    CONTINUE        reduce using rule 20 (stmt -> while_stmt .)
    BREAK           reduce using rule 20 (stmt -> while_stmt .)
    GLOBAL          reduce using rule 20 (stmt -> while_stmt .)
    IDENTIFIER      reduce using rule 20 (stmt -> while_stmt .)
    FOR             reduce using rule 20 (stmt -> while_stmt .)
    IF              reduce using rule 20 (stmt -> while_stmt .)
    SEMI            reduce using rule 20 (stmt -> while_stmt .)
    COMMA           reduce using rule 20 (stmt -> while_stmt .)
    RETURN          reduce using rule 20 (stmt -> while_stmt .)
    SWITCH          reduce using rule 20 (stmt -> while_stmt .)
    TRY             reduce using rule 20 (stmt -> while_stmt .)
    WHILE           reduce using rule 20 (stmt -> while_stmt .)
    NOTEQUAL        reduce using rule 20 (stmt -> while_stmt .)
    NOT             reduce using rule 20 (stmt -> while_stmt .)
    LBRACKET        reduce using rule 20 (stmt -> while_stmt .)
    NUMBER          reduce using rule 20 (stmt -> while_stmt .)
    STRING          reduce using rule 20 (stmt -> while_stmt .)
    COLON           reduce using rule 20 (stmt -> while_stmt .)
    LBRACE          reduce using rule 20 (stmt -> while_stmt .)
    MINUS           reduce using rule 20 (stmt -> while_stmt .)
    PLUS            reduce using rule 20 (stmt -> while_stmt .)
    CASE            reduce using rule 20 (stmt -> while_stmt .)
    OTHERWISE       reduce using rule 20 (stmt -> while_stmt .)
    END             reduce using rule 20 (stmt -> while_stmt .)
    FUNCTION        reduce using rule 20 (stmt -> while_stmt .)
    $end            reduce using rule 20 (stmt -> while_stmt .)
    CATCH           reduce using rule 20 (stmt -> while_stmt .)
    ELSE            reduce using rule 20 (stmt -> while_stmt .)
    ELSEIF          reduce using rule 20 (stmt -> while_stmt .)


state 19

    (89) expr1 -> PLUS . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 83
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 20

    (74) number -> NUMBER .

    FIELD           reduce using rule 74 (number -> NUMBER .)
    TRANSPOSE       reduce using rule 74 (number -> NUMBER .)
    LBRACE          reduce using rule 74 (number -> NUMBER .)
    LBRACKET        reduce using rule 74 (number -> NUMBER .)
    AND             reduce using rule 74 (number -> NUMBER .)
    ANDAND          reduce using rule 74 (number -> NUMBER .)
    LDIV            reduce using rule 74 (number -> NUMBER .)
    COLON           reduce using rule 74 (number -> NUMBER .)
    DIV             reduce using rule 74 (number -> NUMBER .)
    DOT             reduce using rule 74 (number -> NUMBER .)
    DOTDIV          reduce using rule 74 (number -> NUMBER .)
    DOTEXP          reduce using rule 74 (number -> NUMBER .)
    DOTMUL          reduce using rule 74 (number -> NUMBER .)
    EQUALEQUAL      reduce using rule 74 (number -> NUMBER .)
    EXP             reduce using rule 74 (number -> NUMBER .)
    GREATEREQUAL    reduce using rule 74 (number -> NUMBER .)
    GREATERTHAN     reduce using rule 74 (number -> NUMBER .)
    LESSEQUAL       reduce using rule 74 (number -> NUMBER .)
    LESSTHAN        reduce using rule 74 (number -> NUMBER .)
    MINUS           reduce using rule 74 (number -> NUMBER .)
    TIMES           reduce using rule 74 (number -> NUMBER .)
    NOTEQUAL        reduce using rule 74 (number -> NUMBER .)
    OR              reduce using rule 74 (number -> NUMBER .)
    OROR            reduce using rule 74 (number -> NUMBER .)
    PLUS            reduce using rule 74 (number -> NUMBER .)
    EQUALS          reduce using rule 74 (number -> NUMBER .)
    OREQUALS        reduce using rule 74 (number -> NUMBER .)
    COMMA           reduce using rule 74 (number -> NUMBER .)
    SEMI            reduce using rule 74 (number -> NUMBER .)
    RBRACE          reduce using rule 74 (number -> NUMBER .)
    CASE            reduce using rule 74 (number -> NUMBER .)
    OTHERWISE       reduce using rule 74 (number -> NUMBER .)
    END             reduce using rule 74 (number -> NUMBER .)
    error           reduce using rule 74 (number -> NUMBER .)
    RBRACKET        reduce using rule 74 (number -> NUMBER .)


state 21

    (80) expr -> NOT .

    FIELD           reduce using rule 80 (expr -> NOT .)
    TRANSPOSE       reduce using rule 80 (expr -> NOT .)
    LBRACE          reduce using rule 80 (expr -> NOT .)
    LBRACKET        reduce using rule 80 (expr -> NOT .)
    AND             reduce using rule 80 (expr -> NOT .)
    ANDAND          reduce using rule 80 (expr -> NOT .)
    LDIV            reduce using rule 80 (expr -> NOT .)
    COLON           reduce using rule 80 (expr -> NOT .)
    DIV             reduce using rule 80 (expr -> NOT .)
    DOT             reduce using rule 80 (expr -> NOT .)
    DOTDIV          reduce using rule 80 (expr -> NOT .)
    DOTEXP          reduce using rule 80 (expr -> NOT .)
    DOTMUL          reduce using rule 80 (expr -> NOT .)
    EQUALEQUAL      reduce using rule 80 (expr -> NOT .)
    EXP             reduce using rule 80 (expr -> NOT .)
    GREATEREQUAL    reduce using rule 80 (expr -> NOT .)
    GREATERTHAN     reduce using rule 80 (expr -> NOT .)
    LESSEQUAL       reduce using rule 80 (expr -> NOT .)
    LESSTHAN        reduce using rule 80 (expr -> NOT .)
    MINUS           reduce using rule 80 (expr -> NOT .)
    TIMES           reduce using rule 80 (expr -> NOT .)
    NOTEQUAL        reduce using rule 80 (expr -> NOT .)
    OR              reduce using rule 80 (expr -> NOT .)
    OROR            reduce using rule 80 (expr -> NOT .)
    PLUS            reduce using rule 80 (expr -> NOT .)
    EQUALS          reduce using rule 80 (expr -> NOT .)
    OREQUALS        reduce using rule 80 (expr -> NOT .)
    COMMA           reduce using rule 80 (expr -> NOT .)
    RBRACE          reduce using rule 80 (expr -> NOT .)
    SEMI            reduce using rule 80 (expr -> NOT .)
    CASE            reduce using rule 80 (expr -> NOT .)
    OTHERWISE       reduce using rule 80 (expr -> NOT .)
    END             reduce using rule 80 (expr -> NOT .)
    error           reduce using rule 80 (expr -> NOT .)
    RBRACKET        reduce using rule 80 (expr -> NOT .)


state 22

    (62) expr_stmt -> expr_list . SEMI

    SEMI            shift and go to state 84


state 23

    (30) global_stmt -> GLOBAL . global_list SEMI
    (31) global_stmt -> GLOBAL . IDENTIFIER EQUALS expr SEMI
    (28) global_list -> . IDENTIFIER
    (29) global_list -> . global_list IDENTIFIER

    IDENTIFIER      shift and go to state 86

    global_list                    shift and go to state 85

state 24

    (71) for_stmt -> FOR . IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> FOR . LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> FOR . matrix EQUALS expr SEMI stmt_list end
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET

    IDENTIFIER      shift and go to state 89
    LBRACKET        shift and go to state 87

    matrix                         shift and go to state 88

state 25

    (86) string -> STRING .

    FIELD           reduce using rule 86 (string -> STRING .)
    TRANSPOSE       reduce using rule 86 (string -> STRING .)
    LBRACE          reduce using rule 86 (string -> STRING .)
    LBRACKET        reduce using rule 86 (string -> STRING .)
    AND             reduce using rule 86 (string -> STRING .)
    ANDAND          reduce using rule 86 (string -> STRING .)
    LDIV            reduce using rule 86 (string -> STRING .)
    COLON           reduce using rule 86 (string -> STRING .)
    DIV             reduce using rule 86 (string -> STRING .)
    DOT             reduce using rule 86 (string -> STRING .)
    DOTDIV          reduce using rule 86 (string -> STRING .)
    DOTEXP          reduce using rule 86 (string -> STRING .)
    DOTMUL          reduce using rule 86 (string -> STRING .)
    EQUALEQUAL      reduce using rule 86 (string -> STRING .)
    EXP             reduce using rule 86 (string -> STRING .)
    GREATEREQUAL    reduce using rule 86 (string -> STRING .)
    GREATERTHAN     reduce using rule 86 (string -> STRING .)
    LESSEQUAL       reduce using rule 86 (string -> STRING .)
    LESSTHAN        reduce using rule 86 (string -> STRING .)
    MINUS           reduce using rule 86 (string -> STRING .)
    TIMES           reduce using rule 86 (string -> STRING .)
    NOTEQUAL        reduce using rule 86 (string -> STRING .)
    OR              reduce using rule 86 (string -> STRING .)
    OROR            reduce using rule 86 (string -> STRING .)
    PLUS            reduce using rule 86 (string -> STRING .)
    EQUALS          reduce using rule 86 (string -> STRING .)
    OREQUALS        reduce using rule 86 (string -> STRING .)
    COMMA           reduce using rule 86 (string -> STRING .)
    SEMI            reduce using rule 86 (string -> STRING .)
    RBRACE          reduce using rule 86 (string -> STRING .)
    CASE            reduce using rule 86 (string -> STRING .)
    OTHERWISE       reduce using rule 86 (string -> STRING .)
    END             reduce using rule 86 (string -> STRING .)
    error           reduce using rule 86 (string -> STRING .)
    RBRACKET        reduce using rule 86 (string -> STRING .)


state 26

    (88) expr1 -> MINUS . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 90
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 27

    (0) S' -> top .
    (3) top -> top . func_decl stmt_list_opt
    (4) top -> top . func_decl end semi_opt
    (5) top -> top . func_decl stmt_list end semi_opt
    (44) func_decl -> . FUNCTION IDENTIFIER args_opt SEMI
    (45) func_decl -> . FUNCTION ret EQUALS IDENTIFIER args_opt SEMI

    FUNCTION        shift and go to state 92

    func_decl                      shift and go to state 91

state 28

    (87) colon -> COLON .

    FIELD           reduce using rule 87 (colon -> COLON .)
    TRANSPOSE       reduce using rule 87 (colon -> COLON .)
    LBRACE          reduce using rule 87 (colon -> COLON .)
    LBRACKET        reduce using rule 87 (colon -> COLON .)
    AND             reduce using rule 87 (colon -> COLON .)
    ANDAND          reduce using rule 87 (colon -> COLON .)
    LDIV            reduce using rule 87 (colon -> COLON .)
    COLON           reduce using rule 87 (colon -> COLON .)
    DIV             reduce using rule 87 (colon -> COLON .)
    DOT             reduce using rule 87 (colon -> COLON .)
    DOTDIV          reduce using rule 87 (colon -> COLON .)
    DOTEXP          reduce using rule 87 (colon -> COLON .)
    DOTMUL          reduce using rule 87 (colon -> COLON .)
    EQUALEQUAL      reduce using rule 87 (colon -> COLON .)
    EXP             reduce using rule 87 (colon -> COLON .)
    GREATEREQUAL    reduce using rule 87 (colon -> COLON .)
    GREATERTHAN     reduce using rule 87 (colon -> COLON .)
    LESSEQUAL       reduce using rule 87 (colon -> COLON .)
    LESSTHAN        reduce using rule 87 (colon -> COLON .)
    MINUS           reduce using rule 87 (colon -> COLON .)
    TIMES           reduce using rule 87 (colon -> COLON .)
    NOTEQUAL        reduce using rule 87 (colon -> COLON .)
    OR              reduce using rule 87 (colon -> COLON .)
    OROR            reduce using rule 87 (colon -> COLON .)
    PLUS            reduce using rule 87 (colon -> COLON .)
    EQUALS          reduce using rule 87 (colon -> COLON .)
    OREQUALS        reduce using rule 87 (colon -> COLON .)
    COMMA           reduce using rule 87 (colon -> COLON .)
    SEMI            reduce using rule 87 (colon -> COLON .)
    CASE            reduce using rule 87 (colon -> COLON .)
    OTHERWISE       reduce using rule 87 (colon -> COLON .)
    END             reduce using rule 87 (colon -> COLON .)
    RBRACE          reduce using rule 87 (colon -> COLON .)
    error           reduce using rule 87 (colon -> COLON .)
    RBRACKET        reduce using rule 87 (colon -> COLON .)


state 29

    (83) expr -> expr2 .

    FIELD           reduce using rule 83 (expr -> expr2 .)
    TRANSPOSE       reduce using rule 83 (expr -> expr2 .)
    LBRACE          reduce using rule 83 (expr -> expr2 .)
    LBRACKET        reduce using rule 83 (expr -> expr2 .)
    AND             reduce using rule 83 (expr -> expr2 .)
    ANDAND          reduce using rule 83 (expr -> expr2 .)
    LDIV            reduce using rule 83 (expr -> expr2 .)
    COLON           reduce using rule 83 (expr -> expr2 .)
    DIV             reduce using rule 83 (expr -> expr2 .)
    DOT             reduce using rule 83 (expr -> expr2 .)
    DOTDIV          reduce using rule 83 (expr -> expr2 .)
    DOTEXP          reduce using rule 83 (expr -> expr2 .)
    DOTMUL          reduce using rule 83 (expr -> expr2 .)
    EQUALEQUAL      reduce using rule 83 (expr -> expr2 .)
    EXP             reduce using rule 83 (expr -> expr2 .)
    GREATEREQUAL    reduce using rule 83 (expr -> expr2 .)
    GREATERTHAN     reduce using rule 83 (expr -> expr2 .)
    LESSEQUAL       reduce using rule 83 (expr -> expr2 .)
    LESSTHAN        reduce using rule 83 (expr -> expr2 .)
    MINUS           reduce using rule 83 (expr -> expr2 .)
    TIMES           reduce using rule 83 (expr -> expr2 .)
    NOTEQUAL        reduce using rule 83 (expr -> expr2 .)
    OR              reduce using rule 83 (expr -> expr2 .)
    OROR            reduce using rule 83 (expr -> expr2 .)
    PLUS            reduce using rule 83 (expr -> expr2 .)
    EQUALS          reduce using rule 83 (expr -> expr2 .)
    OREQUALS        reduce using rule 83 (expr -> expr2 .)
    COMMA           reduce using rule 83 (expr -> expr2 .)
    RBRACE          reduce using rule 83 (expr -> expr2 .)
    SEMI            reduce using rule 83 (expr -> expr2 .)
    CASE            reduce using rule 83 (expr -> expr2 .)
    OTHERWISE       reduce using rule 83 (expr -> expr2 .)
    END             reduce using rule 83 (expr -> expr2 .)
    error           reduce using rule 83 (expr -> expr2 .)
    RBRACKET        reduce using rule 83 (expr -> expr2 .)


state 30

    (12) stmt -> global_stmt .

    CONTINUE        reduce using rule 12 (stmt -> global_stmt .)
    BREAK           reduce using rule 12 (stmt -> global_stmt .)
    GLOBAL          reduce using rule 12 (stmt -> global_stmt .)
    IDENTIFIER      reduce using rule 12 (stmt -> global_stmt .)
    FOR             reduce using rule 12 (stmt -> global_stmt .)
    IF              reduce using rule 12 (stmt -> global_stmt .)
    SEMI            reduce using rule 12 (stmt -> global_stmt .)
    COMMA           reduce using rule 12 (stmt -> global_stmt .)
    RETURN          reduce using rule 12 (stmt -> global_stmt .)
    SWITCH          reduce using rule 12 (stmt -> global_stmt .)
    TRY             reduce using rule 12 (stmt -> global_stmt .)
    WHILE           reduce using rule 12 (stmt -> global_stmt .)
    NOTEQUAL        reduce using rule 12 (stmt -> global_stmt .)
    NOT             reduce using rule 12 (stmt -> global_stmt .)
    LBRACKET        reduce using rule 12 (stmt -> global_stmt .)
    NUMBER          reduce using rule 12 (stmt -> global_stmt .)
    STRING          reduce using rule 12 (stmt -> global_stmt .)
    COLON           reduce using rule 12 (stmt -> global_stmt .)
    LBRACE          reduce using rule 12 (stmt -> global_stmt .)
    MINUS           reduce using rule 12 (stmt -> global_stmt .)
    PLUS            reduce using rule 12 (stmt -> global_stmt .)
    CASE            reduce using rule 12 (stmt -> global_stmt .)
    OTHERWISE       reduce using rule 12 (stmt -> global_stmt .)
    END             reduce using rule 12 (stmt -> global_stmt .)
    FUNCTION        reduce using rule 12 (stmt -> global_stmt .)
    $end            reduce using rule 12 (stmt -> global_stmt .)
    CATCH           reduce using rule 12 (stmt -> global_stmt .)
    ELSE            reduce using rule 12 (stmt -> global_stmt .)
    ELSEIF          reduce using rule 12 (stmt -> global_stmt .)


state 31

    (76) expr -> number .

    FIELD           reduce using rule 76 (expr -> number .)
    TRANSPOSE       reduce using rule 76 (expr -> number .)
    LBRACE          reduce using rule 76 (expr -> number .)
    LBRACKET        reduce using rule 76 (expr -> number .)
    AND             reduce using rule 76 (expr -> number .)
    ANDAND          reduce using rule 76 (expr -> number .)
    LDIV            reduce using rule 76 (expr -> number .)
    COLON           reduce using rule 76 (expr -> number .)
    DIV             reduce using rule 76 (expr -> number .)
    DOT             reduce using rule 76 (expr -> number .)
    DOTDIV          reduce using rule 76 (expr -> number .)
    DOTEXP          reduce using rule 76 (expr -> number .)
    DOTMUL          reduce using rule 76 (expr -> number .)
    EQUALEQUAL      reduce using rule 76 (expr -> number .)
    EXP             reduce using rule 76 (expr -> number .)
    GREATEREQUAL    reduce using rule 76 (expr -> number .)
    GREATERTHAN     reduce using rule 76 (expr -> number .)
    LESSEQUAL       reduce using rule 76 (expr -> number .)
    LESSTHAN        reduce using rule 76 (expr -> number .)
    MINUS           reduce using rule 76 (expr -> number .)
    TIMES           reduce using rule 76 (expr -> number .)
    NOTEQUAL        reduce using rule 76 (expr -> number .)
    OR              reduce using rule 76 (expr -> number .)
    OROR            reduce using rule 76 (expr -> number .)
    PLUS            reduce using rule 76 (expr -> number .)
    EQUALS          reduce using rule 76 (expr -> number .)
    OREQUALS        reduce using rule 76 (expr -> number .)
    COMMA           reduce using rule 76 (expr -> number .)
    RBRACE          reduce using rule 76 (expr -> number .)
    SEMI            reduce using rule 76 (expr -> number .)
    CASE            reduce using rule 76 (expr -> number .)
    OTHERWISE       reduce using rule 76 (expr -> number .)
    END             reduce using rule 76 (expr -> number .)
    error           reduce using rule 76 (expr -> number .)
    RBRACKET        reduce using rule 76 (expr -> number .)


state 32

    (19) stmt -> try_catch .

    CONTINUE        reduce using rule 19 (stmt -> try_catch .)
    BREAK           reduce using rule 19 (stmt -> try_catch .)
    GLOBAL          reduce using rule 19 (stmt -> try_catch .)
    IDENTIFIER      reduce using rule 19 (stmt -> try_catch .)
    FOR             reduce using rule 19 (stmt -> try_catch .)
    IF              reduce using rule 19 (stmt -> try_catch .)
    SEMI            reduce using rule 19 (stmt -> try_catch .)
    COMMA           reduce using rule 19 (stmt -> try_catch .)
    RETURN          reduce using rule 19 (stmt -> try_catch .)
    SWITCH          reduce using rule 19 (stmt -> try_catch .)
    TRY             reduce using rule 19 (stmt -> try_catch .)
    WHILE           reduce using rule 19 (stmt -> try_catch .)
    NOTEQUAL        reduce using rule 19 (stmt -> try_catch .)
    NOT             reduce using rule 19 (stmt -> try_catch .)
    LBRACKET        reduce using rule 19 (stmt -> try_catch .)
    NUMBER          reduce using rule 19 (stmt -> try_catch .)
    STRING          reduce using rule 19 (stmt -> try_catch .)
    COLON           reduce using rule 19 (stmt -> try_catch .)
    LBRACE          reduce using rule 19 (stmt -> try_catch .)
    MINUS           reduce using rule 19 (stmt -> try_catch .)
    PLUS            reduce using rule 19 (stmt -> try_catch .)
    CASE            reduce using rule 19 (stmt -> try_catch .)
    OTHERWISE       reduce using rule 19 (stmt -> try_catch .)
    END             reduce using rule 19 (stmt -> try_catch .)
    FUNCTION        reduce using rule 19 (stmt -> try_catch .)
    $end            reduce using rule 19 (stmt -> try_catch .)
    CATCH           reduce using rule 19 (stmt -> try_catch .)
    ELSE            reduce using rule 19 (stmt -> try_catch .)
    ELSEIF          reduce using rule 19 (stmt -> try_catch .)


state 33

    (42) null_stmt -> SEMI .

    CONTINUE        reduce using rule 42 (null_stmt -> SEMI .)
    BREAK           reduce using rule 42 (null_stmt -> SEMI .)
    GLOBAL          reduce using rule 42 (null_stmt -> SEMI .)
    IDENTIFIER      reduce using rule 42 (null_stmt -> SEMI .)
    FOR             reduce using rule 42 (null_stmt -> SEMI .)
    IF              reduce using rule 42 (null_stmt -> SEMI .)
    SEMI            reduce using rule 42 (null_stmt -> SEMI .)
    COMMA           reduce using rule 42 (null_stmt -> SEMI .)
    RETURN          reduce using rule 42 (null_stmt -> SEMI .)
    SWITCH          reduce using rule 42 (null_stmt -> SEMI .)
    TRY             reduce using rule 42 (null_stmt -> SEMI .)
    WHILE           reduce using rule 42 (null_stmt -> SEMI .)
    NOTEQUAL        reduce using rule 42 (null_stmt -> SEMI .)
    NOT             reduce using rule 42 (null_stmt -> SEMI .)
    LBRACKET        reduce using rule 42 (null_stmt -> SEMI .)
    NUMBER          reduce using rule 42 (null_stmt -> SEMI .)
    STRING          reduce using rule 42 (null_stmt -> SEMI .)
    COLON           reduce using rule 42 (null_stmt -> SEMI .)
    LBRACE          reduce using rule 42 (null_stmt -> SEMI .)
    MINUS           reduce using rule 42 (null_stmt -> SEMI .)
    PLUS            reduce using rule 42 (null_stmt -> SEMI .)
    ELSE            reduce using rule 42 (null_stmt -> SEMI .)
    ELSEIF          reduce using rule 42 (null_stmt -> SEMI .)
    END             reduce using rule 42 (null_stmt -> SEMI .)
    CASE            reduce using rule 42 (null_stmt -> SEMI .)
    OTHERWISE       reduce using rule 42 (null_stmt -> SEMI .)
    FUNCTION        reduce using rule 42 (null_stmt -> SEMI .)
    $end            reduce using rule 42 (null_stmt -> SEMI .)
    CATCH           reduce using rule 42 (null_stmt -> SEMI .)


state 34

    (32) return_stmt -> RETURN . SEMI

    SEMI            shift and go to state 93


state 35

    (35) switch_stmt -> SWITCH . expr semi_opt case_list end
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 94
    cellarray                      shift and go to state 3
    string                         shift and go to state 38
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    number                         shift and go to state 31
    matrix                         shift and go to state 45
    colon                          shift and go to state 16

state 36

    (34) break_stmt -> BREAK . SEMI

    SEMI            shift and go to state 95


state 37

    (66) if_stmt -> IF . expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> IF . expr error stmt_list_opt elseif_stmt end
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 96
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    string                         shift and go to state 38
    expr2                          shift and go to state 29
    expr1                          shift and go to state 43
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 38

    (77) expr -> string .

    FIELD           reduce using rule 77 (expr -> string .)
    TRANSPOSE       reduce using rule 77 (expr -> string .)
    LBRACE          reduce using rule 77 (expr -> string .)
    LBRACKET        reduce using rule 77 (expr -> string .)
    AND             reduce using rule 77 (expr -> string .)
    ANDAND          reduce using rule 77 (expr -> string .)
    LDIV            reduce using rule 77 (expr -> string .)
    COLON           reduce using rule 77 (expr -> string .)
    DIV             reduce using rule 77 (expr -> string .)
    DOT             reduce using rule 77 (expr -> string .)
    DOTDIV          reduce using rule 77 (expr -> string .)
    DOTEXP          reduce using rule 77 (expr -> string .)
    DOTMUL          reduce using rule 77 (expr -> string .)
    EQUALEQUAL      reduce using rule 77 (expr -> string .)
    EXP             reduce using rule 77 (expr -> string .)
    GREATEREQUAL    reduce using rule 77 (expr -> string .)
    GREATERTHAN     reduce using rule 77 (expr -> string .)
    LESSEQUAL       reduce using rule 77 (expr -> string .)
    LESSTHAN        reduce using rule 77 (expr -> string .)
    MINUS           reduce using rule 77 (expr -> string .)
    TIMES           reduce using rule 77 (expr -> string .)
    NOTEQUAL        reduce using rule 77 (expr -> string .)
    OR              reduce using rule 77 (expr -> string .)
    OROR            reduce using rule 77 (expr -> string .)
    PLUS            reduce using rule 77 (expr -> string .)
    EQUALS          reduce using rule 77 (expr -> string .)
    OREQUALS        reduce using rule 77 (expr -> string .)
    COMMA           reduce using rule 77 (expr -> string .)
    RBRACE          reduce using rule 77 (expr -> string .)
    SEMI            reduce using rule 77 (expr -> string .)
    CASE            reduce using rule 77 (expr -> string .)
    OTHERWISE       reduce using rule 77 (expr -> string .)
    END             reduce using rule 77 (expr -> string .)
    error           reduce using rule 77 (expr -> string .)
    RBRACKET        reduce using rule 77 (expr -> string .)


state 39

    (100) expr -> LBRACKET . expr RBRACKET
    (95) matrix -> LBRACKET . RBRACKET
    (96) matrix -> LBRACKET . concat_list RBRACKET
    (97) matrix -> LBRACKET . concat_list SEMI RBRACKET
    (98) matrix -> LBRACKET . expr_list RBRACKET
    (99) matrix -> LBRACKET . expr_list SEMI RBRACKET
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (56) concat_list -> . expr_list SEMI expr_list
    (57) concat_list -> . concat_list SEMI expr_list
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr

    RBRACKET        shift and go to state 99
    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 97
    string                         shift and go to state 38
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    expr_list                      shift and go to state 100
    concat_list                    shift and go to state 98
    matrix                         shift and go to state 45
    exprs                          shift and go to state 2
    number                         shift and go to state 31

state 40

    (79) expr -> NOTEQUAL .
    (90) expr1 -> NOTEQUAL . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    FIELD           reduce using rule 79 (expr -> NOTEQUAL .)
    TRANSPOSE       reduce using rule 79 (expr -> NOTEQUAL .)
    LBRACKET        reduce using rule 79 (expr -> NOTEQUAL .)
    AND             reduce using rule 79 (expr -> NOTEQUAL .)
    ANDAND          reduce using rule 79 (expr -> NOTEQUAL .)
    LDIV            reduce using rule 79 (expr -> NOTEQUAL .)
    COLON           reduce using rule 79 (expr -> NOTEQUAL .)
    DIV             reduce using rule 79 (expr -> NOTEQUAL .)
    DOT             reduce using rule 79 (expr -> NOTEQUAL .)
    DOTDIV          reduce using rule 79 (expr -> NOTEQUAL .)
    DOTEXP          reduce using rule 79 (expr -> NOTEQUAL .)
    DOTMUL          reduce using rule 79 (expr -> NOTEQUAL .)
    EQUALEQUAL      reduce using rule 79 (expr -> NOTEQUAL .)
    EXP             reduce using rule 79 (expr -> NOTEQUAL .)
    GREATEREQUAL    reduce using rule 79 (expr -> NOTEQUAL .)
    GREATERTHAN     reduce using rule 79 (expr -> NOTEQUAL .)
    LESSEQUAL       reduce using rule 79 (expr -> NOTEQUAL .)
    LESSTHAN        reduce using rule 79 (expr -> NOTEQUAL .)
    TIMES           reduce using rule 79 (expr -> NOTEQUAL .)
    NOTEQUAL        reduce using rule 79 (expr -> NOTEQUAL .)
    OR              reduce using rule 79 (expr -> NOTEQUAL .)
    OROR            reduce using rule 79 (expr -> NOTEQUAL .)
    EQUALS          reduce using rule 79 (expr -> NOTEQUAL .)
    OREQUALS        reduce using rule 79 (expr -> NOTEQUAL .)
    COMMA           reduce using rule 79 (expr -> NOTEQUAL .)
    RBRACE          reduce using rule 79 (expr -> NOTEQUAL .)
    SEMI            reduce using rule 79 (expr -> NOTEQUAL .)
    CASE            reduce using rule 79 (expr -> NOTEQUAL .)
    OTHERWISE       reduce using rule 79 (expr -> NOTEQUAL .)
    END             reduce using rule 79 (expr -> NOTEQUAL .)
    error           reduce using rule 79 (expr -> NOTEQUAL .)
    RBRACKET        reduce using rule 79 (expr -> NOTEQUAL .)
    IDENTIFIER      shift and go to state 78
    NOT             shift and go to state 21
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

  ! LBRACE          [ reduce using rule 79 (expr -> NOTEQUAL .) ]
  ! MINUS           [ reduce using rule 79 (expr -> NOTEQUAL .) ]
  ! PLUS            [ reduce using rule 79 (expr -> NOTEQUAL .) ]
  ! NOTEQUAL        [ shift and go to state 40 ]
  ! LBRACKET        [ shift and go to state 39 ]
  ! COLON           [ shift and go to state 28 ]

    cellarray                      shift and go to state 3
    expr                           shift and go to state 101
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 41

    (18) stmt -> switch_stmt .

    CONTINUE        reduce using rule 18 (stmt -> switch_stmt .)
    BREAK           reduce using rule 18 (stmt -> switch_stmt .)
    GLOBAL          reduce using rule 18 (stmt -> switch_stmt .)
    IDENTIFIER      reduce using rule 18 (stmt -> switch_stmt .)
    FOR             reduce using rule 18 (stmt -> switch_stmt .)
    IF              reduce using rule 18 (stmt -> switch_stmt .)
    SEMI            reduce using rule 18 (stmt -> switch_stmt .)
    COMMA           reduce using rule 18 (stmt -> switch_stmt .)
    RETURN          reduce using rule 18 (stmt -> switch_stmt .)
    SWITCH          reduce using rule 18 (stmt -> switch_stmt .)
    TRY             reduce using rule 18 (stmt -> switch_stmt .)
    WHILE           reduce using rule 18 (stmt -> switch_stmt .)
    NOTEQUAL        reduce using rule 18 (stmt -> switch_stmt .)
    NOT             reduce using rule 18 (stmt -> switch_stmt .)
    LBRACKET        reduce using rule 18 (stmt -> switch_stmt .)
    NUMBER          reduce using rule 18 (stmt -> switch_stmt .)
    STRING          reduce using rule 18 (stmt -> switch_stmt .)
    COLON           reduce using rule 18 (stmt -> switch_stmt .)
    LBRACE          reduce using rule 18 (stmt -> switch_stmt .)
    MINUS           reduce using rule 18 (stmt -> switch_stmt .)
    PLUS            reduce using rule 18 (stmt -> switch_stmt .)
    CASE            reduce using rule 18 (stmt -> switch_stmt .)
    OTHERWISE       reduce using rule 18 (stmt -> switch_stmt .)
    END             reduce using rule 18 (stmt -> switch_stmt .)
    FUNCTION        reduce using rule 18 (stmt -> switch_stmt .)
    $end            reduce using rule 18 (stmt -> switch_stmt .)
    CATCH           reduce using rule 18 (stmt -> switch_stmt .)
    ELSE            reduce using rule 18 (stmt -> switch_stmt .)
    ELSEIF          reduce using rule 18 (stmt -> switch_stmt .)


state 42

    (9) stmt -> continue_stmt .

    CONTINUE        reduce using rule 9 (stmt -> continue_stmt .)
    BREAK           reduce using rule 9 (stmt -> continue_stmt .)
    GLOBAL          reduce using rule 9 (stmt -> continue_stmt .)
    IDENTIFIER      reduce using rule 9 (stmt -> continue_stmt .)
    FOR             reduce using rule 9 (stmt -> continue_stmt .)
    IF              reduce using rule 9 (stmt -> continue_stmt .)
    SEMI            reduce using rule 9 (stmt -> continue_stmt .)
    COMMA           reduce using rule 9 (stmt -> continue_stmt .)
    RETURN          reduce using rule 9 (stmt -> continue_stmt .)
    SWITCH          reduce using rule 9 (stmt -> continue_stmt .)
    TRY             reduce using rule 9 (stmt -> continue_stmt .)
    WHILE           reduce using rule 9 (stmt -> continue_stmt .)
    NOTEQUAL        reduce using rule 9 (stmt -> continue_stmt .)
    NOT             reduce using rule 9 (stmt -> continue_stmt .)
    LBRACKET        reduce using rule 9 (stmt -> continue_stmt .)
    NUMBER          reduce using rule 9 (stmt -> continue_stmt .)
    STRING          reduce using rule 9 (stmt -> continue_stmt .)
    COLON           reduce using rule 9 (stmt -> continue_stmt .)
    LBRACE          reduce using rule 9 (stmt -> continue_stmt .)
    MINUS           reduce using rule 9 (stmt -> continue_stmt .)
    PLUS            reduce using rule 9 (stmt -> continue_stmt .)
    CASE            reduce using rule 9 (stmt -> continue_stmt .)
    OTHERWISE       reduce using rule 9 (stmt -> continue_stmt .)
    END             reduce using rule 9 (stmt -> continue_stmt .)
    FUNCTION        reduce using rule 9 (stmt -> continue_stmt .)
    $end            reduce using rule 9 (stmt -> continue_stmt .)
    CATCH           reduce using rule 9 (stmt -> continue_stmt .)
    ELSE            reduce using rule 9 (stmt -> continue_stmt .)
    ELSEIF          reduce using rule 9 (stmt -> continue_stmt .)


state 43

    (84) expr -> expr1 .

    FIELD           reduce using rule 84 (expr -> expr1 .)
    TRANSPOSE       reduce using rule 84 (expr -> expr1 .)
    LBRACE          reduce using rule 84 (expr -> expr1 .)
    LBRACKET        reduce using rule 84 (expr -> expr1 .)
    AND             reduce using rule 84 (expr -> expr1 .)
    ANDAND          reduce using rule 84 (expr -> expr1 .)
    LDIV            reduce using rule 84 (expr -> expr1 .)
    COLON           reduce using rule 84 (expr -> expr1 .)
    DIV             reduce using rule 84 (expr -> expr1 .)
    DOT             reduce using rule 84 (expr -> expr1 .)
    DOTDIV          reduce using rule 84 (expr -> expr1 .)
    DOTEXP          reduce using rule 84 (expr -> expr1 .)
    DOTMUL          reduce using rule 84 (expr -> expr1 .)
    EQUALEQUAL      reduce using rule 84 (expr -> expr1 .)
    EXP             reduce using rule 84 (expr -> expr1 .)
    GREATEREQUAL    reduce using rule 84 (expr -> expr1 .)
    GREATERTHAN     reduce using rule 84 (expr -> expr1 .)
    LESSEQUAL       reduce using rule 84 (expr -> expr1 .)
    LESSTHAN        reduce using rule 84 (expr -> expr1 .)
    MINUS           reduce using rule 84 (expr -> expr1 .)
    TIMES           reduce using rule 84 (expr -> expr1 .)
    NOTEQUAL        reduce using rule 84 (expr -> expr1 .)
    OR              reduce using rule 84 (expr -> expr1 .)
    OROR            reduce using rule 84 (expr -> expr1 .)
    PLUS            reduce using rule 84 (expr -> expr1 .)
    EQUALS          reduce using rule 84 (expr -> expr1 .)
    OREQUALS        reduce using rule 84 (expr -> expr1 .)
    COMMA           reduce using rule 84 (expr -> expr1 .)
    RBRACE          reduce using rule 84 (expr -> expr1 .)
    SEMI            reduce using rule 84 (expr -> expr1 .)
    CASE            reduce using rule 84 (expr -> expr1 .)
    OTHERWISE       reduce using rule 84 (expr -> expr1 .)
    END             reduce using rule 84 (expr -> expr1 .)
    error           reduce using rule 84 (expr -> expr1 .)
    RBRACKET        reduce using rule 84 (expr -> expr1 .)


state 44

    (16) stmt -> null_stmt .

    CONTINUE        reduce using rule 16 (stmt -> null_stmt .)
    BREAK           reduce using rule 16 (stmt -> null_stmt .)
    GLOBAL          reduce using rule 16 (stmt -> null_stmt .)
    IDENTIFIER      reduce using rule 16 (stmt -> null_stmt .)
    FOR             reduce using rule 16 (stmt -> null_stmt .)
    IF              reduce using rule 16 (stmt -> null_stmt .)
    SEMI            reduce using rule 16 (stmt -> null_stmt .)
    COMMA           reduce using rule 16 (stmt -> null_stmt .)
    RETURN          reduce using rule 16 (stmt -> null_stmt .)
    SWITCH          reduce using rule 16 (stmt -> null_stmt .)
    TRY             reduce using rule 16 (stmt -> null_stmt .)
    WHILE           reduce using rule 16 (stmt -> null_stmt .)
    NOTEQUAL        reduce using rule 16 (stmt -> null_stmt .)
    NOT             reduce using rule 16 (stmt -> null_stmt .)
    LBRACKET        reduce using rule 16 (stmt -> null_stmt .)
    NUMBER          reduce using rule 16 (stmt -> null_stmt .)
    STRING          reduce using rule 16 (stmt -> null_stmt .)
    COLON           reduce using rule 16 (stmt -> null_stmt .)
    LBRACE          reduce using rule 16 (stmt -> null_stmt .)
    MINUS           reduce using rule 16 (stmt -> null_stmt .)
    PLUS            reduce using rule 16 (stmt -> null_stmt .)
    CASE            reduce using rule 16 (stmt -> null_stmt .)
    OTHERWISE       reduce using rule 16 (stmt -> null_stmt .)
    END             reduce using rule 16 (stmt -> null_stmt .)
    FUNCTION        reduce using rule 16 (stmt -> null_stmt .)
    $end            reduce using rule 16 (stmt -> null_stmt .)
    CATCH           reduce using rule 16 (stmt -> null_stmt .)
    ELSE            reduce using rule 16 (stmt -> null_stmt .)
    ELSEIF          reduce using rule 16 (stmt -> null_stmt .)


state 45

    (81) expr -> matrix .

    FIELD           reduce using rule 81 (expr -> matrix .)
    TRANSPOSE       reduce using rule 81 (expr -> matrix .)
    LBRACE          reduce using rule 81 (expr -> matrix .)
    LBRACKET        reduce using rule 81 (expr -> matrix .)
    AND             reduce using rule 81 (expr -> matrix .)
    ANDAND          reduce using rule 81 (expr -> matrix .)
    LDIV            reduce using rule 81 (expr -> matrix .)
    COLON           reduce using rule 81 (expr -> matrix .)
    DIV             reduce using rule 81 (expr -> matrix .)
    DOT             reduce using rule 81 (expr -> matrix .)
    DOTDIV          reduce using rule 81 (expr -> matrix .)
    DOTEXP          reduce using rule 81 (expr -> matrix .)
    DOTMUL          reduce using rule 81 (expr -> matrix .)
    EQUALEQUAL      reduce using rule 81 (expr -> matrix .)
    EXP             reduce using rule 81 (expr -> matrix .)
    GREATEREQUAL    reduce using rule 81 (expr -> matrix .)
    GREATERTHAN     reduce using rule 81 (expr -> matrix .)
    LESSEQUAL       reduce using rule 81 (expr -> matrix .)
    LESSTHAN        reduce using rule 81 (expr -> matrix .)
    MINUS           reduce using rule 81 (expr -> matrix .)
    TIMES           reduce using rule 81 (expr -> matrix .)
    NOTEQUAL        reduce using rule 81 (expr -> matrix .)
    OR              reduce using rule 81 (expr -> matrix .)
    OROR            reduce using rule 81 (expr -> matrix .)
    PLUS            reduce using rule 81 (expr -> matrix .)
    EQUALS          reduce using rule 81 (expr -> matrix .)
    OREQUALS        reduce using rule 81 (expr -> matrix .)
    COMMA           reduce using rule 81 (expr -> matrix .)
    RBRACE          reduce using rule 81 (expr -> matrix .)
    SEMI            reduce using rule 81 (expr -> matrix .)
    CASE            reduce using rule 81 (expr -> matrix .)
    OTHERWISE       reduce using rule 81 (expr -> matrix .)
    END             reduce using rule 81 (expr -> matrix .)
    error           reduce using rule 81 (expr -> matrix .)
    RBRACKET        reduce using rule 81 (expr -> matrix .)


state 46

    (27) command -> IDENTIFIER . args SEMI
    (75) expr -> IDENTIFIER .
    (25) args -> . arg1
    (26) args -> . args arg1
    (21) arg1 -> . STRING
    (22) arg1 -> . NUMBER
    (23) arg1 -> . IDENTIFIER
    (24) arg1 -> . GLOBAL

    FIELD           reduce using rule 75 (expr -> IDENTIFIER .)
    TRANSPOSE       reduce using rule 75 (expr -> IDENTIFIER .)
    LBRACE          reduce using rule 75 (expr -> IDENTIFIER .)
    LBRACKET        reduce using rule 75 (expr -> IDENTIFIER .)
    AND             reduce using rule 75 (expr -> IDENTIFIER .)
    ANDAND          reduce using rule 75 (expr -> IDENTIFIER .)
    LDIV            reduce using rule 75 (expr -> IDENTIFIER .)
    COLON           reduce using rule 75 (expr -> IDENTIFIER .)
    DIV             reduce using rule 75 (expr -> IDENTIFIER .)
    DOT             reduce using rule 75 (expr -> IDENTIFIER .)
    DOTDIV          reduce using rule 75 (expr -> IDENTIFIER .)
    DOTEXP          reduce using rule 75 (expr -> IDENTIFIER .)
    DOTMUL          reduce using rule 75 (expr -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 75 (expr -> IDENTIFIER .)
    EXP             reduce using rule 75 (expr -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 75 (expr -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 75 (expr -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 75 (expr -> IDENTIFIER .)
    LESSTHAN        reduce using rule 75 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 75 (expr -> IDENTIFIER .)
    TIMES           reduce using rule 75 (expr -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 75 (expr -> IDENTIFIER .)
    OR              reduce using rule 75 (expr -> IDENTIFIER .)
    OROR            reduce using rule 75 (expr -> IDENTIFIER .)
    PLUS            reduce using rule 75 (expr -> IDENTIFIER .)
    EQUALS          reduce using rule 75 (expr -> IDENTIFIER .)
    OREQUALS        reduce using rule 75 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 75 (expr -> IDENTIFIER .)
    SEMI            reduce using rule 75 (expr -> IDENTIFIER .)
    STRING          shift and go to state 104
    NUMBER          shift and go to state 105
    IDENTIFIER      shift and go to state 107
    GLOBAL          shift and go to state 106

    arg1                           shift and go to state 102
    args                           shift and go to state 103

state 47

    (115) expr2 -> expr DOTMUL . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 108
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 48

    (108) expr2 -> expr ANDAND . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 109
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 49

    (111) expr2 -> expr DIV . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 110
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 50

    (101) expr -> expr FIELD .

    FIELD           reduce using rule 101 (expr -> expr FIELD .)
    TRANSPOSE       reduce using rule 101 (expr -> expr FIELD .)
    LBRACE          reduce using rule 101 (expr -> expr FIELD .)
    LBRACKET        reduce using rule 101 (expr -> expr FIELD .)
    AND             reduce using rule 101 (expr -> expr FIELD .)
    ANDAND          reduce using rule 101 (expr -> expr FIELD .)
    LDIV            reduce using rule 101 (expr -> expr FIELD .)
    COLON           reduce using rule 101 (expr -> expr FIELD .)
    DIV             reduce using rule 101 (expr -> expr FIELD .)
    DOT             reduce using rule 101 (expr -> expr FIELD .)
    DOTDIV          reduce using rule 101 (expr -> expr FIELD .)
    DOTEXP          reduce using rule 101 (expr -> expr FIELD .)
    DOTMUL          reduce using rule 101 (expr -> expr FIELD .)
    EQUALEQUAL      reduce using rule 101 (expr -> expr FIELD .)
    EXP             reduce using rule 101 (expr -> expr FIELD .)
    GREATEREQUAL    reduce using rule 101 (expr -> expr FIELD .)
    GREATERTHAN     reduce using rule 101 (expr -> expr FIELD .)
    LESSEQUAL       reduce using rule 101 (expr -> expr FIELD .)
    LESSTHAN        reduce using rule 101 (expr -> expr FIELD .)
    MINUS           reduce using rule 101 (expr -> expr FIELD .)
    TIMES           reduce using rule 101 (expr -> expr FIELD .)
    NOTEQUAL        reduce using rule 101 (expr -> expr FIELD .)
    OR              reduce using rule 101 (expr -> expr FIELD .)
    OROR            reduce using rule 101 (expr -> expr FIELD .)
    PLUS            reduce using rule 101 (expr -> expr FIELD .)
    EQUALS          reduce using rule 101 (expr -> expr FIELD .)
    OREQUALS        reduce using rule 101 (expr -> expr FIELD .)
    COMMA           reduce using rule 101 (expr -> expr FIELD .)
    RBRACE          reduce using rule 101 (expr -> expr FIELD .)
    SEMI            reduce using rule 101 (expr -> expr FIELD .)
    CASE            reduce using rule 101 (expr -> expr FIELD .)
    OTHERWISE       reduce using rule 101 (expr -> expr FIELD .)
    END             reduce using rule 101 (expr -> expr FIELD .)
    error           reduce using rule 101 (expr -> expr FIELD .)
    RBRACKET        reduce using rule 101 (expr -> expr FIELD .)


state 51

    (110) expr2 -> expr COLON . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 111
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 52

    (123) expr2 -> expr TIMES . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 112
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 53

    (102) expr -> expr TRANSPOSE .

    FIELD           reduce using rule 102 (expr -> expr TRANSPOSE .)
    TRANSPOSE       reduce using rule 102 (expr -> expr TRANSPOSE .)
    LBRACE          reduce using rule 102 (expr -> expr TRANSPOSE .)
    LBRACKET        reduce using rule 102 (expr -> expr TRANSPOSE .)
    AND             reduce using rule 102 (expr -> expr TRANSPOSE .)
    ANDAND          reduce using rule 102 (expr -> expr TRANSPOSE .)
    LDIV            reduce using rule 102 (expr -> expr TRANSPOSE .)
    COLON           reduce using rule 102 (expr -> expr TRANSPOSE .)
    DIV             reduce using rule 102 (expr -> expr TRANSPOSE .)
    DOT             reduce using rule 102 (expr -> expr TRANSPOSE .)
    DOTDIV          reduce using rule 102 (expr -> expr TRANSPOSE .)
    DOTEXP          reduce using rule 102 (expr -> expr TRANSPOSE .)
    DOTMUL          reduce using rule 102 (expr -> expr TRANSPOSE .)
    EQUALEQUAL      reduce using rule 102 (expr -> expr TRANSPOSE .)
    EXP             reduce using rule 102 (expr -> expr TRANSPOSE .)
    GREATEREQUAL    reduce using rule 102 (expr -> expr TRANSPOSE .)
    GREATERTHAN     reduce using rule 102 (expr -> expr TRANSPOSE .)
    LESSEQUAL       reduce using rule 102 (expr -> expr TRANSPOSE .)
    LESSTHAN        reduce using rule 102 (expr -> expr TRANSPOSE .)
    MINUS           reduce using rule 102 (expr -> expr TRANSPOSE .)
    TIMES           reduce using rule 102 (expr -> expr TRANSPOSE .)
    NOTEQUAL        reduce using rule 102 (expr -> expr TRANSPOSE .)
    OR              reduce using rule 102 (expr -> expr TRANSPOSE .)
    OROR            reduce using rule 102 (expr -> expr TRANSPOSE .)
    PLUS            reduce using rule 102 (expr -> expr TRANSPOSE .)
    EQUALS          reduce using rule 102 (expr -> expr TRANSPOSE .)
    OREQUALS        reduce using rule 102 (expr -> expr TRANSPOSE .)
    COMMA           reduce using rule 102 (expr -> expr TRANSPOSE .)
    RBRACE          reduce using rule 102 (expr -> expr TRANSPOSE .)
    SEMI            reduce using rule 102 (expr -> expr TRANSPOSE .)
    CASE            reduce using rule 102 (expr -> expr TRANSPOSE .)
    OTHERWISE       reduce using rule 102 (expr -> expr TRANSPOSE .)
    END             reduce using rule 102 (expr -> expr TRANSPOSE .)
    error           reduce using rule 102 (expr -> expr TRANSPOSE .)
    RBRACKET        reduce using rule 102 (expr -> expr TRANSPOSE .)


state 54

    (119) expr2 -> expr GREATERTHAN . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 113
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 55

    (114) expr2 -> expr DOTEXP . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 114
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 56

    (109) expr2 -> expr LDIV . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 115
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 57

    (129) expr2 -> expr OREQUALS . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 116
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 58

    (121) expr2 -> expr LESSTHAN . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 117
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 59

    (120) expr2 -> expr LESSEQUAL . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 118
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 60

    (128) expr2 -> expr EQUALS . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 119
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 61

    (118) expr2 -> expr GREATEREQUAL . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 120
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 62

    (107) expr2 -> expr AND . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 121
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 63

    (103) expr -> expr LBRACE . expr_list RBRACE
    (104) expr -> expr LBRACE . RBRACE
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    RBRACE          shift and go to state 122
    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 1
    string                         shift and go to state 38
    colon                          shift and go to state 16
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    expr_list                      shift and go to state 123
    expr1                          shift and go to state 43
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 64

    (125) expr2 -> expr OR . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 124
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 65

    (113) expr2 -> expr DOTDIV . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 125
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 66

    (112) expr2 -> expr DOT . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 126
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 67

    (117) expr2 -> expr EXP . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 127
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 68

    (105) expr -> expr LBRACKET . expr_list RBRACKET
    (106) expr -> expr LBRACKET . RBRACKET
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    RBRACKET        shift and go to state 128
    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 1
    string                         shift and go to state 38
    colon                          shift and go to state 16
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    expr_list                      shift and go to state 129
    expr1                          shift and go to state 43
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 69

    (124) expr2 -> expr NOTEQUAL . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 130
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 70

    (127) expr2 -> expr PLUS . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 131
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 71

    (122) expr2 -> expr MINUS . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 132
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 72

    (126) expr2 -> expr OROR . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 133
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 73

    (116) expr2 -> expr EQUALEQUAL . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 134
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 74

    (59) expr_list -> exprs COMMA .
    (61) exprs -> exprs COMMA . expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    SEMI            reduce using rule 59 (expr_list -> exprs COMMA .)
    RBRACKET        reduce using rule 59 (expr_list -> exprs COMMA .)
    RBRACE          reduce using rule 59 (expr_list -> exprs COMMA .)
    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 135
    colon                          shift and go to state 16
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    expr1                          shift and go to state 43
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 75

    (55) stmt_list -> stmt_list stmt .

    CONTINUE        reduce using rule 55 (stmt_list -> stmt_list stmt .)
    BREAK           reduce using rule 55 (stmt_list -> stmt_list stmt .)
    GLOBAL          reduce using rule 55 (stmt_list -> stmt_list stmt .)
    IDENTIFIER      reduce using rule 55 (stmt_list -> stmt_list stmt .)
    FOR             reduce using rule 55 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 55 (stmt_list -> stmt_list stmt .)
    SEMI            reduce using rule 55 (stmt_list -> stmt_list stmt .)
    COMMA           reduce using rule 55 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 55 (stmt_list -> stmt_list stmt .)
    SWITCH          reduce using rule 55 (stmt_list -> stmt_list stmt .)
    TRY             reduce using rule 55 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 55 (stmt_list -> stmt_list stmt .)
    NOTEQUAL        reduce using rule 55 (stmt_list -> stmt_list stmt .)
    NOT             reduce using rule 55 (stmt_list -> stmt_list stmt .)
    LBRACKET        reduce using rule 55 (stmt_list -> stmt_list stmt .)
    NUMBER          reduce using rule 55 (stmt_list -> stmt_list stmt .)
    STRING          reduce using rule 55 (stmt_list -> stmt_list stmt .)
    COLON           reduce using rule 55 (stmt_list -> stmt_list stmt .)
    LBRACE          reduce using rule 55 (stmt_list -> stmt_list stmt .)
    MINUS           reduce using rule 55 (stmt_list -> stmt_list stmt .)
    PLUS            reduce using rule 55 (stmt_list -> stmt_list stmt .)
    CASE            reduce using rule 55 (stmt_list -> stmt_list stmt .)
    OTHERWISE       reduce using rule 55 (stmt_list -> stmt_list stmt .)
    END             reduce using rule 55 (stmt_list -> stmt_list stmt .)
    FUNCTION        reduce using rule 55 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 55 (stmt_list -> stmt_list stmt .)
    ELSE            reduce using rule 55 (stmt_list -> stmt_list stmt .)
    ELSEIF          reduce using rule 55 (stmt_list -> stmt_list stmt .)
    CATCH           reduce using rule 55 (stmt_list -> stmt_list stmt .)


state 76

    (40) try_catch -> TRY stmt_list . CATCH stmt_list end
    (41) try_catch -> TRY stmt_list . end
    (55) stmt_list -> stmt_list . stmt
    (85) end -> . END
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    CATCH           shift and go to state 137
    END             shift and go to state 138
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    end                            shift and go to state 136
    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 75
    null_stmt                      shift and go to state 44
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    continue_stmt                  shift and go to state 42
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 77

    (63) while_stmt -> WHILE expr . SEMI stmt_list end
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    SEMI            shift and go to state 139
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57


state 78

    (75) expr -> IDENTIFIER .

    FIELD           reduce using rule 75 (expr -> IDENTIFIER .)
    TRANSPOSE       reduce using rule 75 (expr -> IDENTIFIER .)
    LBRACE          reduce using rule 75 (expr -> IDENTIFIER .)
    LBRACKET        reduce using rule 75 (expr -> IDENTIFIER .)
    AND             reduce using rule 75 (expr -> IDENTIFIER .)
    ANDAND          reduce using rule 75 (expr -> IDENTIFIER .)
    LDIV            reduce using rule 75 (expr -> IDENTIFIER .)
    COLON           reduce using rule 75 (expr -> IDENTIFIER .)
    DIV             reduce using rule 75 (expr -> IDENTIFIER .)
    DOT             reduce using rule 75 (expr -> IDENTIFIER .)
    DOTDIV          reduce using rule 75 (expr -> IDENTIFIER .)
    DOTEXP          reduce using rule 75 (expr -> IDENTIFIER .)
    DOTMUL          reduce using rule 75 (expr -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 75 (expr -> IDENTIFIER .)
    EXP             reduce using rule 75 (expr -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 75 (expr -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 75 (expr -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 75 (expr -> IDENTIFIER .)
    LESSTHAN        reduce using rule 75 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 75 (expr -> IDENTIFIER .)
    TIMES           reduce using rule 75 (expr -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 75 (expr -> IDENTIFIER .)
    OR              reduce using rule 75 (expr -> IDENTIFIER .)
    OROR            reduce using rule 75 (expr -> IDENTIFIER .)
    PLUS            reduce using rule 75 (expr -> IDENTIFIER .)
    EQUALS          reduce using rule 75 (expr -> IDENTIFIER .)
    OREQUALS        reduce using rule 75 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 75 (expr -> IDENTIFIER .)
    RBRACE          reduce using rule 75 (expr -> IDENTIFIER .)
    SEMI            reduce using rule 75 (expr -> IDENTIFIER .)
    CASE            reduce using rule 75 (expr -> IDENTIFIER .)
    OTHERWISE       reduce using rule 75 (expr -> IDENTIFIER .)
    END             reduce using rule 75 (expr -> IDENTIFIER .)
    error           reduce using rule 75 (expr -> IDENTIFIER .)
    RBRACKET        reduce using rule 75 (expr -> IDENTIFIER .)


state 79

    (33) continue_stmt -> CONTINUE SEMI .

    CONTINUE        reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    BREAK           reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    GLOBAL          reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    IDENTIFIER      reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    FOR             reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    IF              reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    SEMI            reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    COMMA           reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    RETURN          reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    SWITCH          reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    TRY             reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    WHILE           reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    NOTEQUAL        reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    NOT             reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    LBRACKET        reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    NUMBER          reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    STRING          reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    COLON           reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    LBRACE          reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    MINUS           reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    PLUS            reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    END             reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    ELSE            reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    ELSEIF          reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    CASE            reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    OTHERWISE       reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    FUNCTION        reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    $end            reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)
    CATCH           reduce using rule 33 (continue_stmt -> CONTINUE SEMI .)


state 80

    (91) cellarray -> LBRACE RBRACE .

    FIELD           reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    TRANSPOSE       reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    LBRACE          reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    AND             reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    ANDAND          reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    LDIV            reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    COLON           reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    DIV             reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    DOT             reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    DOTDIV          reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    DOTEXP          reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    DOTMUL          reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    EQUALEQUAL      reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    EXP             reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    GREATEREQUAL    reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    GREATERTHAN     reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    LESSEQUAL       reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    LESSTHAN        reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    MINUS           reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    TIMES           reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    NOTEQUAL        reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    OR              reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    OROR            reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    PLUS            reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    EQUALS          reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    OREQUALS        reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    COMMA           reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    SEMI            reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    RBRACE          reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    CASE            reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    OTHERWISE       reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    END             reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    error           reduce using rule 91 (cellarray -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 91 (cellarray -> LBRACE RBRACE .)


state 81

    (93) cellarray -> LBRACE concat_list . RBRACE
    (94) cellarray -> LBRACE concat_list . SEMI RBRACE
    (57) concat_list -> concat_list . SEMI expr_list

    RBRACE          shift and go to state 140
    SEMI            shift and go to state 141


state 82

    (92) cellarray -> LBRACE expr_list . RBRACE
    (56) concat_list -> expr_list . SEMI expr_list

    RBRACE          shift and go to state 143
    SEMI            shift and go to state 142


state 83

    (89) expr1 -> PLUS expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 89 (expr1 -> PLUS expr .)
    AND             reduce using rule 89 (expr1 -> PLUS expr .)
    ANDAND          reduce using rule 89 (expr1 -> PLUS expr .)
    LDIV            reduce using rule 89 (expr1 -> PLUS expr .)
    COLON           reduce using rule 89 (expr1 -> PLUS expr .)
    DIV             reduce using rule 89 (expr1 -> PLUS expr .)
    DOTDIV          reduce using rule 89 (expr1 -> PLUS expr .)
    DOTMUL          reduce using rule 89 (expr1 -> PLUS expr .)
    EQUALEQUAL      reduce using rule 89 (expr1 -> PLUS expr .)
    GREATEREQUAL    reduce using rule 89 (expr1 -> PLUS expr .)
    GREATERTHAN     reduce using rule 89 (expr1 -> PLUS expr .)
    LESSEQUAL       reduce using rule 89 (expr1 -> PLUS expr .)
    LESSTHAN        reduce using rule 89 (expr1 -> PLUS expr .)
    MINUS           reduce using rule 89 (expr1 -> PLUS expr .)
    TIMES           reduce using rule 89 (expr1 -> PLUS expr .)
    NOTEQUAL        reduce using rule 89 (expr1 -> PLUS expr .)
    OR              reduce using rule 89 (expr1 -> PLUS expr .)
    OROR            reduce using rule 89 (expr1 -> PLUS expr .)
    PLUS            reduce using rule 89 (expr1 -> PLUS expr .)
    EQUALS          reduce using rule 89 (expr1 -> PLUS expr .)
    OREQUALS        reduce using rule 89 (expr1 -> PLUS expr .)
    COMMA           reduce using rule 89 (expr1 -> PLUS expr .)
    SEMI            reduce using rule 89 (expr1 -> PLUS expr .)
    RBRACE          reduce using rule 89 (expr1 -> PLUS expr .)
    CASE            reduce using rule 89 (expr1 -> PLUS expr .)
    OTHERWISE       reduce using rule 89 (expr1 -> PLUS expr .)
    END             reduce using rule 89 (expr1 -> PLUS expr .)
    error           reduce using rule 89 (expr1 -> PLUS expr .)
    RBRACKET        reduce using rule 89 (expr1 -> PLUS expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    DOT             shift and go to state 66
    DOTEXP          shift and go to state 55
    EXP             shift and go to state 67

  ! FIELD           [ reduce using rule 89 (expr1 -> PLUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 89 (expr1 -> PLUS expr .) ]
  ! LBRACE          [ reduce using rule 89 (expr1 -> PLUS expr .) ]
  ! DOT             [ reduce using rule 89 (expr1 -> PLUS expr .) ]
  ! DOTEXP          [ reduce using rule 89 (expr1 -> PLUS expr .) ]
  ! EXP             [ reduce using rule 89 (expr1 -> PLUS expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! LDIV            [ shift and go to state 56 ]
  ! COLON           [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 49 ]
  ! DOTDIV          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 47 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 84

    (62) expr_stmt -> expr_list SEMI .

    CONTINUE        reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    BREAK           reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    GLOBAL          reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    IDENTIFIER      reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    FOR             reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    IF              reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    SEMI            reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    COMMA           reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    RETURN          reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    SWITCH          reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    TRY             reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    WHILE           reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    NOTEQUAL        reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    NOT             reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    LBRACKET        reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    NUMBER          reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    STRING          reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    COLON           reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    LBRACE          reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    MINUS           reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    PLUS            reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    CASE            reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    OTHERWISE       reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    END             reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    FUNCTION        reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    $end            reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    ELSE            reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    ELSEIF          reduce using rule 62 (expr_stmt -> expr_list SEMI .)
    CATCH           reduce using rule 62 (expr_stmt -> expr_list SEMI .)


state 85

    (30) global_stmt -> GLOBAL global_list . SEMI
    (29) global_list -> global_list . IDENTIFIER

    SEMI            shift and go to state 144
    IDENTIFIER      shift and go to state 145


state 86

    (31) global_stmt -> GLOBAL IDENTIFIER . EQUALS expr SEMI
    (28) global_list -> IDENTIFIER .

    EQUALS          shift and go to state 146
    SEMI            reduce using rule 28 (global_list -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 28 (global_list -> IDENTIFIER .)


state 87

    (72) for_stmt -> FOR LBRACKET . IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (95) matrix -> LBRACKET . RBRACKET
    (96) matrix -> LBRACKET . concat_list RBRACKET
    (97) matrix -> LBRACKET . concat_list SEMI RBRACKET
    (98) matrix -> LBRACKET . expr_list RBRACKET
    (99) matrix -> LBRACKET . expr_list SEMI RBRACKET
    (56) concat_list -> . expr_list SEMI expr_list
    (57) concat_list -> . concat_list SEMI expr_list
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 147
    RBRACKET        shift and go to state 99
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    string                         shift and go to state 38
    concat_list                    shift and go to state 98
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    expr_list                      shift and go to state 100
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 88

    (73) for_stmt -> FOR matrix . EQUALS expr SEMI stmt_list end

    EQUALS          shift and go to state 148


state 89

    (71) for_stmt -> FOR IDENTIFIER . EQUALS expr SEMI stmt_list end

    EQUALS          shift and go to state 149


state 90

    (88) expr1 -> MINUS expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 88 (expr1 -> MINUS expr .)
    AND             reduce using rule 88 (expr1 -> MINUS expr .)
    ANDAND          reduce using rule 88 (expr1 -> MINUS expr .)
    LDIV            reduce using rule 88 (expr1 -> MINUS expr .)
    COLON           reduce using rule 88 (expr1 -> MINUS expr .)
    DIV             reduce using rule 88 (expr1 -> MINUS expr .)
    DOTDIV          reduce using rule 88 (expr1 -> MINUS expr .)
    DOTMUL          reduce using rule 88 (expr1 -> MINUS expr .)
    EQUALEQUAL      reduce using rule 88 (expr1 -> MINUS expr .)
    GREATEREQUAL    reduce using rule 88 (expr1 -> MINUS expr .)
    GREATERTHAN     reduce using rule 88 (expr1 -> MINUS expr .)
    LESSEQUAL       reduce using rule 88 (expr1 -> MINUS expr .)
    LESSTHAN        reduce using rule 88 (expr1 -> MINUS expr .)
    MINUS           reduce using rule 88 (expr1 -> MINUS expr .)
    TIMES           reduce using rule 88 (expr1 -> MINUS expr .)
    NOTEQUAL        reduce using rule 88 (expr1 -> MINUS expr .)
    OR              reduce using rule 88 (expr1 -> MINUS expr .)
    OROR            reduce using rule 88 (expr1 -> MINUS expr .)
    PLUS            reduce using rule 88 (expr1 -> MINUS expr .)
    EQUALS          reduce using rule 88 (expr1 -> MINUS expr .)
    OREQUALS        reduce using rule 88 (expr1 -> MINUS expr .)
    COMMA           reduce using rule 88 (expr1 -> MINUS expr .)
    SEMI            reduce using rule 88 (expr1 -> MINUS expr .)
    RBRACE          reduce using rule 88 (expr1 -> MINUS expr .)
    CASE            reduce using rule 88 (expr1 -> MINUS expr .)
    OTHERWISE       reduce using rule 88 (expr1 -> MINUS expr .)
    END             reduce using rule 88 (expr1 -> MINUS expr .)
    error           reduce using rule 88 (expr1 -> MINUS expr .)
    RBRACKET        reduce using rule 88 (expr1 -> MINUS expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    DOT             shift and go to state 66
    DOTEXP          shift and go to state 55
    EXP             shift and go to state 67

  ! FIELD           [ reduce using rule 88 (expr1 -> MINUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 88 (expr1 -> MINUS expr .) ]
  ! LBRACE          [ reduce using rule 88 (expr1 -> MINUS expr .) ]
  ! DOT             [ reduce using rule 88 (expr1 -> MINUS expr .) ]
  ! DOTEXP          [ reduce using rule 88 (expr1 -> MINUS expr .) ]
  ! EXP             [ reduce using rule 88 (expr1 -> MINUS expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! LDIV            [ shift and go to state 56 ]
  ! COLON           [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 49 ]
  ! DOTDIV          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 47 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 91

    (3) top -> top func_decl . stmt_list_opt
    (4) top -> top func_decl . end semi_opt
    (5) top -> top func_decl . stmt_list end semi_opt
    (52) stmt_list_opt -> .
    (53) stmt_list_opt -> . stmt_list
    (85) end -> . END
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    FUNCTION        reduce using rule 52 (stmt_list_opt -> .)
    $end            reduce using rule 52 (stmt_list_opt -> .)
    END             shift and go to state 138
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    end                            shift and go to state 150
    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 151
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    while_stmt                     shift and go to state 18
    stmt_list_opt                  shift and go to state 152

state 92

    (44) func_decl -> FUNCTION . IDENTIFIER args_opt SEMI
    (45) func_decl -> FUNCTION . ret EQUALS IDENTIFIER args_opt SEMI
    (49) ret -> . IDENTIFIER
    (50) ret -> . LBRACKET RBRACKET
    (51) ret -> . LBRACKET expr_list RBRACKET

    IDENTIFIER      shift and go to state 154
    LBRACKET        shift and go to state 155

    ret                            shift and go to state 153

state 93

    (32) return_stmt -> RETURN SEMI .

    END             reduce using rule 32 (return_stmt -> RETURN SEMI .)
    CONTINUE        reduce using rule 32 (return_stmt -> RETURN SEMI .)
    BREAK           reduce using rule 32 (return_stmt -> RETURN SEMI .)
    GLOBAL          reduce using rule 32 (return_stmt -> RETURN SEMI .)
    IDENTIFIER      reduce using rule 32 (return_stmt -> RETURN SEMI .)
    FOR             reduce using rule 32 (return_stmt -> RETURN SEMI .)
    IF              reduce using rule 32 (return_stmt -> RETURN SEMI .)
    SEMI            reduce using rule 32 (return_stmt -> RETURN SEMI .)
    COMMA           reduce using rule 32 (return_stmt -> RETURN SEMI .)
    RETURN          reduce using rule 32 (return_stmt -> RETURN SEMI .)
    SWITCH          reduce using rule 32 (return_stmt -> RETURN SEMI .)
    TRY             reduce using rule 32 (return_stmt -> RETURN SEMI .)
    WHILE           reduce using rule 32 (return_stmt -> RETURN SEMI .)
    NOTEQUAL        reduce using rule 32 (return_stmt -> RETURN SEMI .)
    NOT             reduce using rule 32 (return_stmt -> RETURN SEMI .)
    LBRACKET        reduce using rule 32 (return_stmt -> RETURN SEMI .)
    NUMBER          reduce using rule 32 (return_stmt -> RETURN SEMI .)
    STRING          reduce using rule 32 (return_stmt -> RETURN SEMI .)
    COLON           reduce using rule 32 (return_stmt -> RETURN SEMI .)
    LBRACE          reduce using rule 32 (return_stmt -> RETURN SEMI .)
    MINUS           reduce using rule 32 (return_stmt -> RETURN SEMI .)
    PLUS            reduce using rule 32 (return_stmt -> RETURN SEMI .)
    CATCH           reduce using rule 32 (return_stmt -> RETURN SEMI .)
    FUNCTION        reduce using rule 32 (return_stmt -> RETURN SEMI .)
    $end            reduce using rule 32 (return_stmt -> RETURN SEMI .)
    ELSE            reduce using rule 32 (return_stmt -> RETURN SEMI .)
    ELSEIF          reduce using rule 32 (return_stmt -> RETURN SEMI .)
    CASE            reduce using rule 32 (return_stmt -> RETURN SEMI .)
    OTHERWISE       reduce using rule 32 (return_stmt -> RETURN SEMI .)


state 94

    (35) switch_stmt -> SWITCH expr . semi_opt case_list end
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr
    (6) semi_opt -> .
    (7) semi_opt -> . semi_opt SEMI
    (8) semi_opt -> . semi_opt COMMA

    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57
    SEMI            reduce using rule 6 (semi_opt -> .)
    COMMA           reduce using rule 6 (semi_opt -> .)
    CASE            reduce using rule 6 (semi_opt -> .)
    OTHERWISE       reduce using rule 6 (semi_opt -> .)
    END             reduce using rule 6 (semi_opt -> .)

    semi_opt                       shift and go to state 156

state 95

    (34) break_stmt -> BREAK SEMI .

    END             reduce using rule 34 (break_stmt -> BREAK SEMI .)
    CONTINUE        reduce using rule 34 (break_stmt -> BREAK SEMI .)
    BREAK           reduce using rule 34 (break_stmt -> BREAK SEMI .)
    GLOBAL          reduce using rule 34 (break_stmt -> BREAK SEMI .)
    IDENTIFIER      reduce using rule 34 (break_stmt -> BREAK SEMI .)
    FOR             reduce using rule 34 (break_stmt -> BREAK SEMI .)
    IF              reduce using rule 34 (break_stmt -> BREAK SEMI .)
    SEMI            reduce using rule 34 (break_stmt -> BREAK SEMI .)
    COMMA           reduce using rule 34 (break_stmt -> BREAK SEMI .)
    RETURN          reduce using rule 34 (break_stmt -> BREAK SEMI .)
    SWITCH          reduce using rule 34 (break_stmt -> BREAK SEMI .)
    TRY             reduce using rule 34 (break_stmt -> BREAK SEMI .)
    WHILE           reduce using rule 34 (break_stmt -> BREAK SEMI .)
    NOTEQUAL        reduce using rule 34 (break_stmt -> BREAK SEMI .)
    NOT             reduce using rule 34 (break_stmt -> BREAK SEMI .)
    LBRACKET        reduce using rule 34 (break_stmt -> BREAK SEMI .)
    NUMBER          reduce using rule 34 (break_stmt -> BREAK SEMI .)
    STRING          reduce using rule 34 (break_stmt -> BREAK SEMI .)
    COLON           reduce using rule 34 (break_stmt -> BREAK SEMI .)
    LBRACE          reduce using rule 34 (break_stmt -> BREAK SEMI .)
    MINUS           reduce using rule 34 (break_stmt -> BREAK SEMI .)
    PLUS            reduce using rule 34 (break_stmt -> BREAK SEMI .)
    ELSE            reduce using rule 34 (break_stmt -> BREAK SEMI .)
    ELSEIF          reduce using rule 34 (break_stmt -> BREAK SEMI .)
    CASE            reduce using rule 34 (break_stmt -> BREAK SEMI .)
    OTHERWISE       reduce using rule 34 (break_stmt -> BREAK SEMI .)
    FUNCTION        reduce using rule 34 (break_stmt -> BREAK SEMI .)
    $end            reduce using rule 34 (break_stmt -> BREAK SEMI .)
    CATCH           reduce using rule 34 (break_stmt -> BREAK SEMI .)


state 96

    (66) if_stmt -> IF expr . sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> IF expr . error stmt_list_opt elseif_stmt end
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr
    (64) sep -> . COMMA
    (65) sep -> . SEMI

    error           shift and go to state 159
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57
    COMMA           shift and go to state 157
    SEMI            shift and go to state 158

    sep                            shift and go to state 160

state 97

    (100) expr -> LBRACKET expr . RBRACKET
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr
    (60) exprs -> expr .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 161
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57
    COMMA           reduce using rule 60 (exprs -> expr .)
    SEMI            reduce using rule 60 (exprs -> expr .)

  ! RBRACKET        [ reduce using rule 60 (exprs -> expr .) ]


state 98

    (96) matrix -> LBRACKET concat_list . RBRACKET
    (97) matrix -> LBRACKET concat_list . SEMI RBRACKET
    (57) concat_list -> concat_list . SEMI expr_list

    RBRACKET        shift and go to state 162
    SEMI            shift and go to state 163


state 99

    (95) matrix -> LBRACKET RBRACKET .

    FIELD           reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    TRANSPOSE       reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    AND             reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    ANDAND          reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    LDIV            reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    COLON           reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    DIV             reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    DOT             reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    DOTDIV          reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    DOTEXP          reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    DOTMUL          reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    EQUALEQUAL      reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    EXP             reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    GREATEREQUAL    reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    GREATERTHAN     reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    LESSEQUAL       reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    LESSTHAN        reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    NOTEQUAL        reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    OR              reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    OROR            reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    EQUALS          reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    OREQUALS        reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    SEMI            reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    CASE            reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    OTHERWISE       reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    END             reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    error           reduce using rule 95 (matrix -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 95 (matrix -> LBRACKET RBRACKET .)


state 100

    (98) matrix -> LBRACKET expr_list . RBRACKET
    (99) matrix -> LBRACKET expr_list . SEMI RBRACKET
    (56) concat_list -> expr_list . SEMI expr_list

    RBRACKET        shift and go to state 164
    SEMI            shift and go to state 165


state 101

    (90) expr1 -> NOTEQUAL expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    ANDAND          reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    COLON           reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    EQUALEQUAL      reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    GREATEREQUAL    reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    GREATERTHAN     reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    LESSEQUAL       reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    LESSTHAN        reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    NOTEQUAL        reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    OROR            reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    EQUALS          reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    OREQUALS        reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    COMMA           reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    SEMI            reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    RBRACE          reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    CASE            reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    OTHERWISE       reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    END             reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    error           reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    RBRACKET        reduce using rule 90 (expr1 -> NOTEQUAL expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EXP             shift and go to state 67
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    OR              shift and go to state 64
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! TRANSPOSE       [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! LBRACE          [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! AND             [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! LDIV            [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! DIV             [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! DOT             [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! DOTDIV          [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! DOTEXP          [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! DOTMUL          [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! EXP             [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! MINUS           [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! TIMES           [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! OR              [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! PLUS            [ reduce using rule 90 (expr1 -> NOTEQUAL expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OROR            [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 102

    (25) args -> arg1 .

    SEMI            reduce using rule 25 (args -> arg1 .)
    STRING          reduce using rule 25 (args -> arg1 .)
    NUMBER          reduce using rule 25 (args -> arg1 .)
    IDENTIFIER      reduce using rule 25 (args -> arg1 .)
    GLOBAL          reduce using rule 25 (args -> arg1 .)


state 103

    (27) command -> IDENTIFIER args . SEMI
    (26) args -> args . arg1
    (21) arg1 -> . STRING
    (22) arg1 -> . NUMBER
    (23) arg1 -> . IDENTIFIER
    (24) arg1 -> . GLOBAL

    SEMI            shift and go to state 167
    STRING          shift and go to state 104
    NUMBER          shift and go to state 105
    IDENTIFIER      shift and go to state 107
    GLOBAL          shift and go to state 106

    arg1                           shift and go to state 166

state 104

    (21) arg1 -> STRING .

    SEMI            reduce using rule 21 (arg1 -> STRING .)
    STRING          reduce using rule 21 (arg1 -> STRING .)
    NUMBER          reduce using rule 21 (arg1 -> STRING .)
    IDENTIFIER      reduce using rule 21 (arg1 -> STRING .)
    GLOBAL          reduce using rule 21 (arg1 -> STRING .)


state 105

    (22) arg1 -> NUMBER .

    SEMI            reduce using rule 22 (arg1 -> NUMBER .)
    STRING          reduce using rule 22 (arg1 -> NUMBER .)
    NUMBER          reduce using rule 22 (arg1 -> NUMBER .)
    IDENTIFIER      reduce using rule 22 (arg1 -> NUMBER .)
    GLOBAL          reduce using rule 22 (arg1 -> NUMBER .)


state 106

    (24) arg1 -> GLOBAL .

    SEMI            reduce using rule 24 (arg1 -> GLOBAL .)
    STRING          reduce using rule 24 (arg1 -> GLOBAL .)
    NUMBER          reduce using rule 24 (arg1 -> GLOBAL .)
    IDENTIFIER      reduce using rule 24 (arg1 -> GLOBAL .)
    GLOBAL          reduce using rule 24 (arg1 -> GLOBAL .)


state 107

    (23) arg1 -> IDENTIFIER .

    SEMI            reduce using rule 23 (arg1 -> IDENTIFIER .)
    STRING          reduce using rule 23 (arg1 -> IDENTIFIER .)
    NUMBER          reduce using rule 23 (arg1 -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 23 (arg1 -> IDENTIFIER .)
    GLOBAL          reduce using rule 23 (arg1 -> IDENTIFIER .)


state 108

    (115) expr2 -> expr DOTMUL expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    AND             reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    ANDAND          reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    LDIV            reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    COLON           reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    DIV             reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    EQUALEQUAL      reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    GREATEREQUAL    reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    GREATERTHAN     reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    LESSEQUAL       reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    LESSTHAN        reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    MINUS           reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    TIMES           reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    NOTEQUAL        reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    OR              reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    OROR            reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    PLUS            reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    EQUALS          reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    OREQUALS        reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    COMMA           reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    SEMI            reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    error           reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    RBRACE          reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    CASE            reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    OTHERWISE       reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    END             reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    RBRACKET        reduce using rule 115 (expr2 -> expr DOTMUL expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    DOT             shift and go to state 66
    DOTEXP          shift and go to state 55
    EXP             shift and go to state 67

  ! FIELD           [ reduce using rule 115 (expr2 -> expr DOTMUL expr .) ]
  ! TRANSPOSE       [ reduce using rule 115 (expr2 -> expr DOTMUL expr .) ]
  ! LBRACE          [ reduce using rule 115 (expr2 -> expr DOTMUL expr .) ]
  ! DOT             [ reduce using rule 115 (expr2 -> expr DOTMUL expr .) ]
  ! DOTEXP          [ reduce using rule 115 (expr2 -> expr DOTMUL expr .) ]
  ! EXP             [ reduce using rule 115 (expr2 -> expr DOTMUL expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! LDIV            [ shift and go to state 56 ]
  ! COLON           [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 49 ]
  ! DOTDIV          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 47 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 109

    (108) expr2 -> expr ANDAND expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 108 (expr2 -> expr ANDAND expr .)
    ANDAND          reduce using rule 108 (expr2 -> expr ANDAND expr .)
    COLON           reduce using rule 108 (expr2 -> expr ANDAND expr .)
    OROR            reduce using rule 108 (expr2 -> expr ANDAND expr .)
    EQUALS          reduce using rule 108 (expr2 -> expr ANDAND expr .)
    OREQUALS        reduce using rule 108 (expr2 -> expr ANDAND expr .)
    COMMA           reduce using rule 108 (expr2 -> expr ANDAND expr .)
    SEMI            reduce using rule 108 (expr2 -> expr ANDAND expr .)
    error           reduce using rule 108 (expr2 -> expr ANDAND expr .)
    RBRACE          reduce using rule 108 (expr2 -> expr ANDAND expr .)
    CASE            reduce using rule 108 (expr2 -> expr ANDAND expr .)
    OTHERWISE       reduce using rule 108 (expr2 -> expr ANDAND expr .)
    END             reduce using rule 108 (expr2 -> expr ANDAND expr .)
    RBRACKET        reduce using rule 108 (expr2 -> expr ANDAND expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! TRANSPOSE       [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! LBRACE          [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! AND             [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! LDIV            [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! DIV             [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! DOT             [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! DOTDIV          [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! DOTEXP          [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! DOTMUL          [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! EQUALEQUAL      [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! EXP             [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! GREATEREQUAL    [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! GREATERTHAN     [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! LESSEQUAL       [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! LESSTHAN        [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! MINUS           [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! TIMES           [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! NOTEQUAL        [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! OR              [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! PLUS            [ reduce using rule 108 (expr2 -> expr ANDAND expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! OROR            [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 110

    (111) expr2 -> expr DIV expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 111 (expr2 -> expr DIV expr .)
    AND             reduce using rule 111 (expr2 -> expr DIV expr .)
    ANDAND          reduce using rule 111 (expr2 -> expr DIV expr .)
    LDIV            reduce using rule 111 (expr2 -> expr DIV expr .)
    COLON           reduce using rule 111 (expr2 -> expr DIV expr .)
    DIV             reduce using rule 111 (expr2 -> expr DIV expr .)
    DOTDIV          reduce using rule 111 (expr2 -> expr DIV expr .)
    DOTMUL          reduce using rule 111 (expr2 -> expr DIV expr .)
    EQUALEQUAL      reduce using rule 111 (expr2 -> expr DIV expr .)
    GREATEREQUAL    reduce using rule 111 (expr2 -> expr DIV expr .)
    GREATERTHAN     reduce using rule 111 (expr2 -> expr DIV expr .)
    LESSEQUAL       reduce using rule 111 (expr2 -> expr DIV expr .)
    LESSTHAN        reduce using rule 111 (expr2 -> expr DIV expr .)
    MINUS           reduce using rule 111 (expr2 -> expr DIV expr .)
    TIMES           reduce using rule 111 (expr2 -> expr DIV expr .)
    NOTEQUAL        reduce using rule 111 (expr2 -> expr DIV expr .)
    OR              reduce using rule 111 (expr2 -> expr DIV expr .)
    OROR            reduce using rule 111 (expr2 -> expr DIV expr .)
    PLUS            reduce using rule 111 (expr2 -> expr DIV expr .)
    EQUALS          reduce using rule 111 (expr2 -> expr DIV expr .)
    OREQUALS        reduce using rule 111 (expr2 -> expr DIV expr .)
    COMMA           reduce using rule 111 (expr2 -> expr DIV expr .)
    SEMI            reduce using rule 111 (expr2 -> expr DIV expr .)
    error           reduce using rule 111 (expr2 -> expr DIV expr .)
    RBRACE          reduce using rule 111 (expr2 -> expr DIV expr .)
    CASE            reduce using rule 111 (expr2 -> expr DIV expr .)
    OTHERWISE       reduce using rule 111 (expr2 -> expr DIV expr .)
    END             reduce using rule 111 (expr2 -> expr DIV expr .)
    RBRACKET        reduce using rule 111 (expr2 -> expr DIV expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    DOT             shift and go to state 66
    DOTEXP          shift and go to state 55
    EXP             shift and go to state 67

  ! FIELD           [ reduce using rule 111 (expr2 -> expr DIV expr .) ]
  ! TRANSPOSE       [ reduce using rule 111 (expr2 -> expr DIV expr .) ]
  ! LBRACE          [ reduce using rule 111 (expr2 -> expr DIV expr .) ]
  ! DOT             [ reduce using rule 111 (expr2 -> expr DIV expr .) ]
  ! DOTEXP          [ reduce using rule 111 (expr2 -> expr DIV expr .) ]
  ! EXP             [ reduce using rule 111 (expr2 -> expr DIV expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! LDIV            [ shift and go to state 56 ]
  ! COLON           [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 49 ]
  ! DOTDIV          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 47 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 111

    (110) expr2 -> expr COLON expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 110 (expr2 -> expr COLON expr .)
    COLON           reduce using rule 110 (expr2 -> expr COLON expr .)
    EQUALS          reduce using rule 110 (expr2 -> expr COLON expr .)
    OREQUALS        reduce using rule 110 (expr2 -> expr COLON expr .)
    COMMA           reduce using rule 110 (expr2 -> expr COLON expr .)
    SEMI            reduce using rule 110 (expr2 -> expr COLON expr .)
    error           reduce using rule 110 (expr2 -> expr COLON expr .)
    RBRACE          reduce using rule 110 (expr2 -> expr COLON expr .)
    CASE            reduce using rule 110 (expr2 -> expr COLON expr .)
    OTHERWISE       reduce using rule 110 (expr2 -> expr COLON expr .)
    END             reduce using rule 110 (expr2 -> expr COLON expr .)
    RBRACKET        reduce using rule 110 (expr2 -> expr COLON expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! TRANSPOSE       [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! LBRACE          [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! AND             [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! ANDAND          [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! LDIV            [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! DIV             [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! DOT             [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! DOTDIV          [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! DOTEXP          [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! DOTMUL          [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! EQUALEQUAL      [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! EXP             [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! GREATEREQUAL    [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! GREATERTHAN     [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! LESSEQUAL       [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! LESSTHAN        [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! MINUS           [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! TIMES           [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! NOTEQUAL        [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! OR              [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! OROR            [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! PLUS            [ reduce using rule 110 (expr2 -> expr COLON expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 112

    (123) expr2 -> expr TIMES expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 123 (expr2 -> expr TIMES expr .)
    AND             reduce using rule 123 (expr2 -> expr TIMES expr .)
    ANDAND          reduce using rule 123 (expr2 -> expr TIMES expr .)
    LDIV            reduce using rule 123 (expr2 -> expr TIMES expr .)
    COLON           reduce using rule 123 (expr2 -> expr TIMES expr .)
    DIV             reduce using rule 123 (expr2 -> expr TIMES expr .)
    DOTDIV          reduce using rule 123 (expr2 -> expr TIMES expr .)
    DOTMUL          reduce using rule 123 (expr2 -> expr TIMES expr .)
    EQUALEQUAL      reduce using rule 123 (expr2 -> expr TIMES expr .)
    GREATEREQUAL    reduce using rule 123 (expr2 -> expr TIMES expr .)
    GREATERTHAN     reduce using rule 123 (expr2 -> expr TIMES expr .)
    LESSEQUAL       reduce using rule 123 (expr2 -> expr TIMES expr .)
    LESSTHAN        reduce using rule 123 (expr2 -> expr TIMES expr .)
    MINUS           reduce using rule 123 (expr2 -> expr TIMES expr .)
    TIMES           reduce using rule 123 (expr2 -> expr TIMES expr .)
    NOTEQUAL        reduce using rule 123 (expr2 -> expr TIMES expr .)
    OR              reduce using rule 123 (expr2 -> expr TIMES expr .)
    OROR            reduce using rule 123 (expr2 -> expr TIMES expr .)
    PLUS            reduce using rule 123 (expr2 -> expr TIMES expr .)
    EQUALS          reduce using rule 123 (expr2 -> expr TIMES expr .)
    OREQUALS        reduce using rule 123 (expr2 -> expr TIMES expr .)
    COMMA           reduce using rule 123 (expr2 -> expr TIMES expr .)
    SEMI            reduce using rule 123 (expr2 -> expr TIMES expr .)
    error           reduce using rule 123 (expr2 -> expr TIMES expr .)
    RBRACE          reduce using rule 123 (expr2 -> expr TIMES expr .)
    CASE            reduce using rule 123 (expr2 -> expr TIMES expr .)
    OTHERWISE       reduce using rule 123 (expr2 -> expr TIMES expr .)
    END             reduce using rule 123 (expr2 -> expr TIMES expr .)
    RBRACKET        reduce using rule 123 (expr2 -> expr TIMES expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    DOT             shift and go to state 66
    DOTEXP          shift and go to state 55
    EXP             shift and go to state 67

  ! FIELD           [ reduce using rule 123 (expr2 -> expr TIMES expr .) ]
  ! TRANSPOSE       [ reduce using rule 123 (expr2 -> expr TIMES expr .) ]
  ! LBRACE          [ reduce using rule 123 (expr2 -> expr TIMES expr .) ]
  ! DOT             [ reduce using rule 123 (expr2 -> expr TIMES expr .) ]
  ! DOTEXP          [ reduce using rule 123 (expr2 -> expr TIMES expr .) ]
  ! EXP             [ reduce using rule 123 (expr2 -> expr TIMES expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! LDIV            [ shift and go to state 56 ]
  ! COLON           [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 49 ]
  ! DOTDIV          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 47 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 113

    (119) expr2 -> expr GREATERTHAN expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    ANDAND          reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    COLON           reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    EQUALEQUAL      reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    GREATEREQUAL    reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    GREATERTHAN     reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    LESSEQUAL       reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    LESSTHAN        reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    NOTEQUAL        reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    OROR            reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    EQUALS          reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    OREQUALS        reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    COMMA           reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    SEMI            reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    error           reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    RBRACE          reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    CASE            reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    OTHERWISE       reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    END             reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    RBRACKET        reduce using rule 119 (expr2 -> expr GREATERTHAN expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EXP             shift and go to state 67
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    OR              shift and go to state 64
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! TRANSPOSE       [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! LBRACE          [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! AND             [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! LDIV            [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! DIV             [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! DOT             [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! DOTDIV          [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! DOTEXP          [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! DOTMUL          [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! EXP             [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! MINUS           [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! TIMES           [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! OR              [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! PLUS            [ reduce using rule 119 (expr2 -> expr GREATERTHAN expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OROR            [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 114

    (114) expr2 -> expr DOTEXP expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    TRANSPOSE       reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    LBRACKET        reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    AND             reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    ANDAND          reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    LDIV            reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    COLON           reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    DIV             reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    DOTDIV          reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    DOTMUL          reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    EQUALEQUAL      reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    GREATEREQUAL    reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    GREATERTHAN     reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    LESSEQUAL       reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    LESSTHAN        reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    MINUS           reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    TIMES           reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    NOTEQUAL        reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    OR              reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    OROR            reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    PLUS            reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    EQUALS          reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    OREQUALS        reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    COMMA           reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    SEMI            reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    error           reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    RBRACE          reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    CASE            reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    OTHERWISE       reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    END             reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    RBRACKET        reduce using rule 114 (expr2 -> expr DOTEXP expr .)
    FIELD           shift and go to state 50
    LBRACE          shift and go to state 63
    DOT             shift and go to state 66
    DOTEXP          shift and go to state 55
    EXP             shift and go to state 67

  ! FIELD           [ reduce using rule 114 (expr2 -> expr DOTEXP expr .) ]
  ! LBRACE          [ reduce using rule 114 (expr2 -> expr DOTEXP expr .) ]
  ! DOT             [ reduce using rule 114 (expr2 -> expr DOTEXP expr .) ]
  ! DOTEXP          [ reduce using rule 114 (expr2 -> expr DOTEXP expr .) ]
  ! EXP             [ reduce using rule 114 (expr2 -> expr DOTEXP expr .) ]
  ! TRANSPOSE       [ shift and go to state 53 ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! LDIV            [ shift and go to state 56 ]
  ! COLON           [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 49 ]
  ! DOTDIV          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 47 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 115

    (109) expr2 -> expr LDIV expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 109 (expr2 -> expr LDIV expr .)
    AND             reduce using rule 109 (expr2 -> expr LDIV expr .)
    ANDAND          reduce using rule 109 (expr2 -> expr LDIV expr .)
    LDIV            reduce using rule 109 (expr2 -> expr LDIV expr .)
    COLON           reduce using rule 109 (expr2 -> expr LDIV expr .)
    DIV             reduce using rule 109 (expr2 -> expr LDIV expr .)
    DOTDIV          reduce using rule 109 (expr2 -> expr LDIV expr .)
    DOTMUL          reduce using rule 109 (expr2 -> expr LDIV expr .)
    EQUALEQUAL      reduce using rule 109 (expr2 -> expr LDIV expr .)
    GREATEREQUAL    reduce using rule 109 (expr2 -> expr LDIV expr .)
    GREATERTHAN     reduce using rule 109 (expr2 -> expr LDIV expr .)
    LESSEQUAL       reduce using rule 109 (expr2 -> expr LDIV expr .)
    LESSTHAN        reduce using rule 109 (expr2 -> expr LDIV expr .)
    MINUS           reduce using rule 109 (expr2 -> expr LDIV expr .)
    TIMES           reduce using rule 109 (expr2 -> expr LDIV expr .)
    NOTEQUAL        reduce using rule 109 (expr2 -> expr LDIV expr .)
    OR              reduce using rule 109 (expr2 -> expr LDIV expr .)
    OROR            reduce using rule 109 (expr2 -> expr LDIV expr .)
    PLUS            reduce using rule 109 (expr2 -> expr LDIV expr .)
    EQUALS          reduce using rule 109 (expr2 -> expr LDIV expr .)
    OREQUALS        reduce using rule 109 (expr2 -> expr LDIV expr .)
    COMMA           reduce using rule 109 (expr2 -> expr LDIV expr .)
    SEMI            reduce using rule 109 (expr2 -> expr LDIV expr .)
    error           reduce using rule 109 (expr2 -> expr LDIV expr .)
    RBRACE          reduce using rule 109 (expr2 -> expr LDIV expr .)
    CASE            reduce using rule 109 (expr2 -> expr LDIV expr .)
    OTHERWISE       reduce using rule 109 (expr2 -> expr LDIV expr .)
    END             reduce using rule 109 (expr2 -> expr LDIV expr .)
    RBRACKET        reduce using rule 109 (expr2 -> expr LDIV expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    DOT             shift and go to state 66
    DOTEXP          shift and go to state 55
    EXP             shift and go to state 67

  ! FIELD           [ reduce using rule 109 (expr2 -> expr LDIV expr .) ]
  ! TRANSPOSE       [ reduce using rule 109 (expr2 -> expr LDIV expr .) ]
  ! LBRACE          [ reduce using rule 109 (expr2 -> expr LDIV expr .) ]
  ! DOT             [ reduce using rule 109 (expr2 -> expr LDIV expr .) ]
  ! DOTEXP          [ reduce using rule 109 (expr2 -> expr LDIV expr .) ]
  ! EXP             [ reduce using rule 109 (expr2 -> expr LDIV expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! LDIV            [ shift and go to state 56 ]
  ! COLON           [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 49 ]
  ! DOTDIV          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 47 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 116

    (129) expr2 -> expr OREQUALS expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 129 (expr2 -> expr OREQUALS expr .)
    COMMA           reduce using rule 129 (expr2 -> expr OREQUALS expr .)
    SEMI            reduce using rule 129 (expr2 -> expr OREQUALS expr .)
    error           reduce using rule 129 (expr2 -> expr OREQUALS expr .)
    RBRACE          reduce using rule 129 (expr2 -> expr OREQUALS expr .)
    CASE            reduce using rule 129 (expr2 -> expr OREQUALS expr .)
    OTHERWISE       reduce using rule 129 (expr2 -> expr OREQUALS expr .)
    END             reduce using rule 129 (expr2 -> expr OREQUALS expr .)
    RBRACKET        reduce using rule 129 (expr2 -> expr OREQUALS expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57

  ! FIELD           [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! TRANSPOSE       [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! LBRACE          [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! AND             [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! ANDAND          [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! LDIV            [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! COLON           [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! DIV             [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! DOT             [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! DOTDIV          [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! DOTEXP          [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! DOTMUL          [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! EQUALEQUAL      [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! EXP             [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! GREATEREQUAL    [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! GREATERTHAN     [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! LESSEQUAL       [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! LESSTHAN        [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! MINUS           [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! TIMES           [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! NOTEQUAL        [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! OR              [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! OROR            [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! PLUS            [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! EQUALS          [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! OREQUALS        [ reduce using rule 129 (expr2 -> expr OREQUALS expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]


state 117

    (121) expr2 -> expr LESSTHAN expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    ANDAND          reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    COLON           reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    EQUALEQUAL      reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    GREATEREQUAL    reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    GREATERTHAN     reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    LESSEQUAL       reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    LESSTHAN        reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    NOTEQUAL        reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    OROR            reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    EQUALS          reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    OREQUALS        reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    COMMA           reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    SEMI            reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    error           reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    RBRACE          reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    CASE            reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    OTHERWISE       reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    END             reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    RBRACKET        reduce using rule 121 (expr2 -> expr LESSTHAN expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EXP             shift and go to state 67
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    OR              shift and go to state 64
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! TRANSPOSE       [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! LBRACE          [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! AND             [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! LDIV            [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! DIV             [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! DOT             [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! DOTDIV          [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! DOTEXP          [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! DOTMUL          [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! EXP             [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! MINUS           [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! TIMES           [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! OR              [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! PLUS            [ reduce using rule 121 (expr2 -> expr LESSTHAN expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OROR            [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 118

    (120) expr2 -> expr LESSEQUAL expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    ANDAND          reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    COLON           reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    EQUALEQUAL      reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    GREATEREQUAL    reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    GREATERTHAN     reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    LESSEQUAL       reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    LESSTHAN        reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    NOTEQUAL        reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    OROR            reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    EQUALS          reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    OREQUALS        reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    COMMA           reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    SEMI            reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    error           reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    RBRACE          reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    CASE            reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    OTHERWISE       reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    END             reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    RBRACKET        reduce using rule 120 (expr2 -> expr LESSEQUAL expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EXP             shift and go to state 67
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    OR              shift and go to state 64
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! TRANSPOSE       [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! LBRACE          [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! AND             [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! LDIV            [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! DIV             [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! DOT             [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! DOTDIV          [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! DOTEXP          [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! DOTMUL          [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! EXP             [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! MINUS           [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! TIMES           [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! OR              [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! PLUS            [ reduce using rule 120 (expr2 -> expr LESSEQUAL expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OROR            [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 119

    (128) expr2 -> expr EQUALS expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 128 (expr2 -> expr EQUALS expr .)
    COMMA           reduce using rule 128 (expr2 -> expr EQUALS expr .)
    SEMI            reduce using rule 128 (expr2 -> expr EQUALS expr .)
    error           reduce using rule 128 (expr2 -> expr EQUALS expr .)
    RBRACE          reduce using rule 128 (expr2 -> expr EQUALS expr .)
    CASE            reduce using rule 128 (expr2 -> expr EQUALS expr .)
    OTHERWISE       reduce using rule 128 (expr2 -> expr EQUALS expr .)
    END             reduce using rule 128 (expr2 -> expr EQUALS expr .)
    RBRACKET        reduce using rule 128 (expr2 -> expr EQUALS expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57

  ! FIELD           [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! TRANSPOSE       [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! LBRACE          [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! AND             [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! ANDAND          [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! LDIV            [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! COLON           [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! DIV             [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! DOT             [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! DOTDIV          [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! DOTEXP          [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! DOTMUL          [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! EQUALEQUAL      [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! EXP             [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! GREATEREQUAL    [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! GREATERTHAN     [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! LESSEQUAL       [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! LESSTHAN        [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! MINUS           [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! TIMES           [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! NOTEQUAL        [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! OR              [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! OROR            [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! PLUS            [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! EQUALS          [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! OREQUALS        [ reduce using rule 128 (expr2 -> expr EQUALS expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]


state 120

    (118) expr2 -> expr GREATEREQUAL expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    ANDAND          reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    COLON           reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    EQUALEQUAL      reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    GREATEREQUAL    reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    GREATERTHAN     reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    LESSEQUAL       reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    LESSTHAN        reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    NOTEQUAL        reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    OROR            reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    EQUALS          reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    OREQUALS        reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    COMMA           reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    SEMI            reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    error           reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    RBRACE          reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    CASE            reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    OTHERWISE       reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    END             reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    RBRACKET        reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EXP             shift and go to state 67
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    OR              shift and go to state 64
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! TRANSPOSE       [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! LBRACE          [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! AND             [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! LDIV            [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! DIV             [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! DOT             [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! DOTDIV          [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! DOTEXP          [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! DOTMUL          [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! EXP             [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! MINUS           [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! TIMES           [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! OR              [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! PLUS            [ reduce using rule 118 (expr2 -> expr GREATEREQUAL expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OROR            [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 121

    (107) expr2 -> expr AND expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 107 (expr2 -> expr AND expr .)
    AND             reduce using rule 107 (expr2 -> expr AND expr .)
    ANDAND          reduce using rule 107 (expr2 -> expr AND expr .)
    COLON           reduce using rule 107 (expr2 -> expr AND expr .)
    EQUALEQUAL      reduce using rule 107 (expr2 -> expr AND expr .)
    GREATEREQUAL    reduce using rule 107 (expr2 -> expr AND expr .)
    GREATERTHAN     reduce using rule 107 (expr2 -> expr AND expr .)
    LESSEQUAL       reduce using rule 107 (expr2 -> expr AND expr .)
    LESSTHAN        reduce using rule 107 (expr2 -> expr AND expr .)
    NOTEQUAL        reduce using rule 107 (expr2 -> expr AND expr .)
    OR              reduce using rule 107 (expr2 -> expr AND expr .)
    OROR            reduce using rule 107 (expr2 -> expr AND expr .)
    EQUALS          reduce using rule 107 (expr2 -> expr AND expr .)
    OREQUALS        reduce using rule 107 (expr2 -> expr AND expr .)
    COMMA           reduce using rule 107 (expr2 -> expr AND expr .)
    SEMI            reduce using rule 107 (expr2 -> expr AND expr .)
    error           reduce using rule 107 (expr2 -> expr AND expr .)
    RBRACE          reduce using rule 107 (expr2 -> expr AND expr .)
    CASE            reduce using rule 107 (expr2 -> expr AND expr .)
    OTHERWISE       reduce using rule 107 (expr2 -> expr AND expr .)
    END             reduce using rule 107 (expr2 -> expr AND expr .)
    RBRACKET        reduce using rule 107 (expr2 -> expr AND expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EXP             shift and go to state 67
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! TRANSPOSE       [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! LBRACE          [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! LDIV            [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! DIV             [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! DOT             [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! DOTDIV          [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! DOTEXP          [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! DOTMUL          [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! EXP             [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 107 (expr2 -> expr AND expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 122

    (104) expr -> expr LBRACE RBRACE .

    FIELD           reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    TRANSPOSE       reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    LBRACE          reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    LBRACKET        reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    AND             reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    ANDAND          reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    LDIV            reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    COLON           reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    DIV             reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    DOT             reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    DOTDIV          reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    DOTEXP          reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    DOTMUL          reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    EQUALEQUAL      reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    EXP             reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    GREATEREQUAL    reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    GREATERTHAN     reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    LESSEQUAL       reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    LESSTHAN        reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    MINUS           reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    TIMES           reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    NOTEQUAL        reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    OR              reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    OROR            reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    PLUS            reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    EQUALS          reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    OREQUALS        reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    COMMA           reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    RBRACE          reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    SEMI            reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    CASE            reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    OTHERWISE       reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    END             reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    error           reduce using rule 104 (expr -> expr LBRACE RBRACE .)
    RBRACKET        reduce using rule 104 (expr -> expr LBRACE RBRACE .)


state 123

    (103) expr -> expr LBRACE expr_list . RBRACE

    RBRACE          shift and go to state 168


state 124

    (125) expr2 -> expr OR expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 125 (expr2 -> expr OR expr .)
    AND             reduce using rule 125 (expr2 -> expr OR expr .)
    ANDAND          reduce using rule 125 (expr2 -> expr OR expr .)
    COLON           reduce using rule 125 (expr2 -> expr OR expr .)
    EQUALEQUAL      reduce using rule 125 (expr2 -> expr OR expr .)
    GREATEREQUAL    reduce using rule 125 (expr2 -> expr OR expr .)
    GREATERTHAN     reduce using rule 125 (expr2 -> expr OR expr .)
    LESSEQUAL       reduce using rule 125 (expr2 -> expr OR expr .)
    LESSTHAN        reduce using rule 125 (expr2 -> expr OR expr .)
    NOTEQUAL        reduce using rule 125 (expr2 -> expr OR expr .)
    OR              reduce using rule 125 (expr2 -> expr OR expr .)
    OROR            reduce using rule 125 (expr2 -> expr OR expr .)
    EQUALS          reduce using rule 125 (expr2 -> expr OR expr .)
    OREQUALS        reduce using rule 125 (expr2 -> expr OR expr .)
    COMMA           reduce using rule 125 (expr2 -> expr OR expr .)
    SEMI            reduce using rule 125 (expr2 -> expr OR expr .)
    error           reduce using rule 125 (expr2 -> expr OR expr .)
    RBRACE          reduce using rule 125 (expr2 -> expr OR expr .)
    CASE            reduce using rule 125 (expr2 -> expr OR expr .)
    OTHERWISE       reduce using rule 125 (expr2 -> expr OR expr .)
    END             reduce using rule 125 (expr2 -> expr OR expr .)
    RBRACKET        reduce using rule 125 (expr2 -> expr OR expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EXP             shift and go to state 67
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! TRANSPOSE       [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! LBRACE          [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! LDIV            [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! DIV             [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! DOT             [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! DOTDIV          [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! DOTEXP          [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! DOTMUL          [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! EXP             [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 125 (expr2 -> expr OR expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 125

    (113) expr2 -> expr DOTDIV expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    AND             reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    ANDAND          reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    LDIV            reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    COLON           reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    DIV             reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    EQUALEQUAL      reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    GREATEREQUAL    reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    GREATERTHAN     reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    LESSEQUAL       reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    LESSTHAN        reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    MINUS           reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    TIMES           reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    NOTEQUAL        reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    OR              reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    OROR            reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    PLUS            reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    EQUALS          reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    OREQUALS        reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    COMMA           reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    SEMI            reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    error           reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    RBRACE          reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    CASE            reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    OTHERWISE       reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    END             reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    RBRACKET        reduce using rule 113 (expr2 -> expr DOTDIV expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    DOT             shift and go to state 66
    DOTEXP          shift and go to state 55
    EXP             shift and go to state 67

  ! FIELD           [ reduce using rule 113 (expr2 -> expr DOTDIV expr .) ]
  ! TRANSPOSE       [ reduce using rule 113 (expr2 -> expr DOTDIV expr .) ]
  ! LBRACE          [ reduce using rule 113 (expr2 -> expr DOTDIV expr .) ]
  ! DOT             [ reduce using rule 113 (expr2 -> expr DOTDIV expr .) ]
  ! DOTEXP          [ reduce using rule 113 (expr2 -> expr DOTDIV expr .) ]
  ! EXP             [ reduce using rule 113 (expr2 -> expr DOTDIV expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! LDIV            [ shift and go to state 56 ]
  ! COLON           [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 49 ]
  ! DOTDIV          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 47 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 126

    (112) expr2 -> expr DOT expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    FIELD           reduce using rule 112 (expr2 -> expr DOT expr .)
    TRANSPOSE       reduce using rule 112 (expr2 -> expr DOT expr .)
    LBRACE          reduce using rule 112 (expr2 -> expr DOT expr .)
    LBRACKET        reduce using rule 112 (expr2 -> expr DOT expr .)
    AND             reduce using rule 112 (expr2 -> expr DOT expr .)
    ANDAND          reduce using rule 112 (expr2 -> expr DOT expr .)
    LDIV            reduce using rule 112 (expr2 -> expr DOT expr .)
    COLON           reduce using rule 112 (expr2 -> expr DOT expr .)
    DIV             reduce using rule 112 (expr2 -> expr DOT expr .)
    DOT             reduce using rule 112 (expr2 -> expr DOT expr .)
    DOTDIV          reduce using rule 112 (expr2 -> expr DOT expr .)
    DOTEXP          reduce using rule 112 (expr2 -> expr DOT expr .)
    DOTMUL          reduce using rule 112 (expr2 -> expr DOT expr .)
    EQUALEQUAL      reduce using rule 112 (expr2 -> expr DOT expr .)
    EXP             reduce using rule 112 (expr2 -> expr DOT expr .)
    GREATEREQUAL    reduce using rule 112 (expr2 -> expr DOT expr .)
    GREATERTHAN     reduce using rule 112 (expr2 -> expr DOT expr .)
    LESSEQUAL       reduce using rule 112 (expr2 -> expr DOT expr .)
    LESSTHAN        reduce using rule 112 (expr2 -> expr DOT expr .)
    MINUS           reduce using rule 112 (expr2 -> expr DOT expr .)
    TIMES           reduce using rule 112 (expr2 -> expr DOT expr .)
    NOTEQUAL        reduce using rule 112 (expr2 -> expr DOT expr .)
    OR              reduce using rule 112 (expr2 -> expr DOT expr .)
    OROR            reduce using rule 112 (expr2 -> expr DOT expr .)
    PLUS            reduce using rule 112 (expr2 -> expr DOT expr .)
    EQUALS          reduce using rule 112 (expr2 -> expr DOT expr .)
    OREQUALS        reduce using rule 112 (expr2 -> expr DOT expr .)
    COMMA           reduce using rule 112 (expr2 -> expr DOT expr .)
    SEMI            reduce using rule 112 (expr2 -> expr DOT expr .)
    error           reduce using rule 112 (expr2 -> expr DOT expr .)
    RBRACE          reduce using rule 112 (expr2 -> expr DOT expr .)
    CASE            reduce using rule 112 (expr2 -> expr DOT expr .)
    OTHERWISE       reduce using rule 112 (expr2 -> expr DOT expr .)
    END             reduce using rule 112 (expr2 -> expr DOT expr .)
    RBRACKET        reduce using rule 112 (expr2 -> expr DOT expr .)

  ! FIELD           [ shift and go to state 50 ]
  ! TRANSPOSE       [ shift and go to state 53 ]
  ! LBRACE          [ shift and go to state 63 ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! LDIV            [ shift and go to state 56 ]
  ! COLON           [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 49 ]
  ! DOT             [ shift and go to state 66 ]
  ! DOTDIV          [ shift and go to state 65 ]
  ! DOTEXP          [ shift and go to state 55 ]
  ! DOTMUL          [ shift and go to state 47 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! EXP             [ shift and go to state 67 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 127

    (117) expr2 -> expr EXP expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    TRANSPOSE       reduce using rule 117 (expr2 -> expr EXP expr .)
    LBRACKET        reduce using rule 117 (expr2 -> expr EXP expr .)
    AND             reduce using rule 117 (expr2 -> expr EXP expr .)
    ANDAND          reduce using rule 117 (expr2 -> expr EXP expr .)
    LDIV            reduce using rule 117 (expr2 -> expr EXP expr .)
    COLON           reduce using rule 117 (expr2 -> expr EXP expr .)
    DIV             reduce using rule 117 (expr2 -> expr EXP expr .)
    DOTDIV          reduce using rule 117 (expr2 -> expr EXP expr .)
    DOTMUL          reduce using rule 117 (expr2 -> expr EXP expr .)
    EQUALEQUAL      reduce using rule 117 (expr2 -> expr EXP expr .)
    GREATEREQUAL    reduce using rule 117 (expr2 -> expr EXP expr .)
    GREATERTHAN     reduce using rule 117 (expr2 -> expr EXP expr .)
    LESSEQUAL       reduce using rule 117 (expr2 -> expr EXP expr .)
    LESSTHAN        reduce using rule 117 (expr2 -> expr EXP expr .)
    MINUS           reduce using rule 117 (expr2 -> expr EXP expr .)
    TIMES           reduce using rule 117 (expr2 -> expr EXP expr .)
    NOTEQUAL        reduce using rule 117 (expr2 -> expr EXP expr .)
    OR              reduce using rule 117 (expr2 -> expr EXP expr .)
    OROR            reduce using rule 117 (expr2 -> expr EXP expr .)
    PLUS            reduce using rule 117 (expr2 -> expr EXP expr .)
    EQUALS          reduce using rule 117 (expr2 -> expr EXP expr .)
    OREQUALS        reduce using rule 117 (expr2 -> expr EXP expr .)
    COMMA           reduce using rule 117 (expr2 -> expr EXP expr .)
    SEMI            reduce using rule 117 (expr2 -> expr EXP expr .)
    error           reduce using rule 117 (expr2 -> expr EXP expr .)
    RBRACE          reduce using rule 117 (expr2 -> expr EXP expr .)
    CASE            reduce using rule 117 (expr2 -> expr EXP expr .)
    OTHERWISE       reduce using rule 117 (expr2 -> expr EXP expr .)
    END             reduce using rule 117 (expr2 -> expr EXP expr .)
    RBRACKET        reduce using rule 117 (expr2 -> expr EXP expr .)
    FIELD           shift and go to state 50
    LBRACE          shift and go to state 63
    DOT             shift and go to state 66
    DOTEXP          shift and go to state 55
    EXP             shift and go to state 67

  ! FIELD           [ reduce using rule 117 (expr2 -> expr EXP expr .) ]
  ! LBRACE          [ reduce using rule 117 (expr2 -> expr EXP expr .) ]
  ! DOT             [ reduce using rule 117 (expr2 -> expr EXP expr .) ]
  ! DOTEXP          [ reduce using rule 117 (expr2 -> expr EXP expr .) ]
  ! EXP             [ reduce using rule 117 (expr2 -> expr EXP expr .) ]
  ! TRANSPOSE       [ shift and go to state 53 ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! LDIV            [ shift and go to state 56 ]
  ! COLON           [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 49 ]
  ! DOTDIV          [ shift and go to state 65 ]
  ! DOTMUL          [ shift and go to state 47 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 128

    (106) expr -> expr LBRACKET RBRACKET .

    FIELD           reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    TRANSPOSE       reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    LBRACE          reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    AND             reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    ANDAND          reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    LDIV            reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    COLON           reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    DIV             reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    DOT             reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    DOTDIV          reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    DOTEXP          reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    DOTMUL          reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    EQUALEQUAL      reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    EXP             reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    GREATEREQUAL    reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    GREATERTHAN     reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    LESSEQUAL       reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    LESSTHAN        reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    MINUS           reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    TIMES           reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    NOTEQUAL        reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    OR              reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    OROR            reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    PLUS            reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    EQUALS          reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    OREQUALS        reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    COMMA           reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    RBRACE          reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    SEMI            reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    CASE            reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    OTHERWISE       reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    END             reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    error           reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 106 (expr -> expr LBRACKET RBRACKET .)


state 129

    (105) expr -> expr LBRACKET expr_list . RBRACKET

    RBRACKET        shift and go to state 169


state 130

    (124) expr2 -> expr NOTEQUAL expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    ANDAND          reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    COLON           reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    EQUALEQUAL      reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    GREATEREQUAL    reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    GREATERTHAN     reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    LESSEQUAL       reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    LESSTHAN        reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    NOTEQUAL        reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    OROR            reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    EQUALS          reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    OREQUALS        reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    COMMA           reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    SEMI            reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    error           reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    RBRACE          reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    CASE            reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    OTHERWISE       reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    END             reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    RBRACKET        reduce using rule 124 (expr2 -> expr NOTEQUAL expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EXP             shift and go to state 67
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    OR              shift and go to state 64
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! TRANSPOSE       [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! LBRACE          [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! AND             [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! LDIV            [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! DIV             [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! DOT             [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! DOTDIV          [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! DOTEXP          [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! DOTMUL          [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! EXP             [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! MINUS           [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! TIMES           [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! OR              [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! PLUS            [ reduce using rule 124 (expr2 -> expr NOTEQUAL expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OROR            [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 131

    (127) expr2 -> expr PLUS expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 127 (expr2 -> expr PLUS expr .)
    AND             reduce using rule 127 (expr2 -> expr PLUS expr .)
    ANDAND          reduce using rule 127 (expr2 -> expr PLUS expr .)
    COLON           reduce using rule 127 (expr2 -> expr PLUS expr .)
    EQUALEQUAL      reduce using rule 127 (expr2 -> expr PLUS expr .)
    GREATEREQUAL    reduce using rule 127 (expr2 -> expr PLUS expr .)
    GREATERTHAN     reduce using rule 127 (expr2 -> expr PLUS expr .)
    LESSEQUAL       reduce using rule 127 (expr2 -> expr PLUS expr .)
    LESSTHAN        reduce using rule 127 (expr2 -> expr PLUS expr .)
    MINUS           reduce using rule 127 (expr2 -> expr PLUS expr .)
    NOTEQUAL        reduce using rule 127 (expr2 -> expr PLUS expr .)
    OR              reduce using rule 127 (expr2 -> expr PLUS expr .)
    OROR            reduce using rule 127 (expr2 -> expr PLUS expr .)
    PLUS            reduce using rule 127 (expr2 -> expr PLUS expr .)
    EQUALS          reduce using rule 127 (expr2 -> expr PLUS expr .)
    OREQUALS        reduce using rule 127 (expr2 -> expr PLUS expr .)
    COMMA           reduce using rule 127 (expr2 -> expr PLUS expr .)
    SEMI            reduce using rule 127 (expr2 -> expr PLUS expr .)
    error           reduce using rule 127 (expr2 -> expr PLUS expr .)
    RBRACE          reduce using rule 127 (expr2 -> expr PLUS expr .)
    CASE            reduce using rule 127 (expr2 -> expr PLUS expr .)
    OTHERWISE       reduce using rule 127 (expr2 -> expr PLUS expr .)
    END             reduce using rule 127 (expr2 -> expr PLUS expr .)
    RBRACKET        reduce using rule 127 (expr2 -> expr PLUS expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EXP             shift and go to state 67
    TIMES           shift and go to state 52

  ! FIELD           [ reduce using rule 127 (expr2 -> expr PLUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 127 (expr2 -> expr PLUS expr .) ]
  ! LBRACE          [ reduce using rule 127 (expr2 -> expr PLUS expr .) ]
  ! LDIV            [ reduce using rule 127 (expr2 -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 127 (expr2 -> expr PLUS expr .) ]
  ! DOT             [ reduce using rule 127 (expr2 -> expr PLUS expr .) ]
  ! DOTDIV          [ reduce using rule 127 (expr2 -> expr PLUS expr .) ]
  ! DOTEXP          [ reduce using rule 127 (expr2 -> expr PLUS expr .) ]
  ! DOTMUL          [ reduce using rule 127 (expr2 -> expr PLUS expr .) ]
  ! EXP             [ reduce using rule 127 (expr2 -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 127 (expr2 -> expr PLUS expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 132

    (122) expr2 -> expr MINUS expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 122 (expr2 -> expr MINUS expr .)
    AND             reduce using rule 122 (expr2 -> expr MINUS expr .)
    ANDAND          reduce using rule 122 (expr2 -> expr MINUS expr .)
    COLON           reduce using rule 122 (expr2 -> expr MINUS expr .)
    EQUALEQUAL      reduce using rule 122 (expr2 -> expr MINUS expr .)
    GREATEREQUAL    reduce using rule 122 (expr2 -> expr MINUS expr .)
    GREATERTHAN     reduce using rule 122 (expr2 -> expr MINUS expr .)
    LESSEQUAL       reduce using rule 122 (expr2 -> expr MINUS expr .)
    LESSTHAN        reduce using rule 122 (expr2 -> expr MINUS expr .)
    MINUS           reduce using rule 122 (expr2 -> expr MINUS expr .)
    NOTEQUAL        reduce using rule 122 (expr2 -> expr MINUS expr .)
    OR              reduce using rule 122 (expr2 -> expr MINUS expr .)
    OROR            reduce using rule 122 (expr2 -> expr MINUS expr .)
    PLUS            reduce using rule 122 (expr2 -> expr MINUS expr .)
    EQUALS          reduce using rule 122 (expr2 -> expr MINUS expr .)
    OREQUALS        reduce using rule 122 (expr2 -> expr MINUS expr .)
    COMMA           reduce using rule 122 (expr2 -> expr MINUS expr .)
    SEMI            reduce using rule 122 (expr2 -> expr MINUS expr .)
    error           reduce using rule 122 (expr2 -> expr MINUS expr .)
    RBRACE          reduce using rule 122 (expr2 -> expr MINUS expr .)
    CASE            reduce using rule 122 (expr2 -> expr MINUS expr .)
    OTHERWISE       reduce using rule 122 (expr2 -> expr MINUS expr .)
    END             reduce using rule 122 (expr2 -> expr MINUS expr .)
    RBRACKET        reduce using rule 122 (expr2 -> expr MINUS expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EXP             shift and go to state 67
    TIMES           shift and go to state 52

  ! FIELD           [ reduce using rule 122 (expr2 -> expr MINUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 122 (expr2 -> expr MINUS expr .) ]
  ! LBRACE          [ reduce using rule 122 (expr2 -> expr MINUS expr .) ]
  ! LDIV            [ reduce using rule 122 (expr2 -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 122 (expr2 -> expr MINUS expr .) ]
  ! DOT             [ reduce using rule 122 (expr2 -> expr MINUS expr .) ]
  ! DOTDIV          [ reduce using rule 122 (expr2 -> expr MINUS expr .) ]
  ! DOTEXP          [ reduce using rule 122 (expr2 -> expr MINUS expr .) ]
  ! DOTMUL          [ reduce using rule 122 (expr2 -> expr MINUS expr .) ]
  ! EXP             [ reduce using rule 122 (expr2 -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 122 (expr2 -> expr MINUS expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! AND             [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OR              [ shift and go to state 64 ]
  ! OROR            [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 70 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 133

    (126) expr2 -> expr OROR expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 126 (expr2 -> expr OROR expr .)
    ANDAND          reduce using rule 126 (expr2 -> expr OROR expr .)
    COLON           reduce using rule 126 (expr2 -> expr OROR expr .)
    OROR            reduce using rule 126 (expr2 -> expr OROR expr .)
    EQUALS          reduce using rule 126 (expr2 -> expr OROR expr .)
    OREQUALS        reduce using rule 126 (expr2 -> expr OROR expr .)
    COMMA           reduce using rule 126 (expr2 -> expr OROR expr .)
    SEMI            reduce using rule 126 (expr2 -> expr OROR expr .)
    error           reduce using rule 126 (expr2 -> expr OROR expr .)
    RBRACE          reduce using rule 126 (expr2 -> expr OROR expr .)
    CASE            reduce using rule 126 (expr2 -> expr OROR expr .)
    OTHERWISE       reduce using rule 126 (expr2 -> expr OROR expr .)
    END             reduce using rule 126 (expr2 -> expr OROR expr .)
    RBRACKET        reduce using rule 126 (expr2 -> expr OROR expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! TRANSPOSE       [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! LBRACE          [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! AND             [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! LDIV            [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! DIV             [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! DOT             [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! DOTDIV          [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! DOTEXP          [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! DOTMUL          [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! EQUALEQUAL      [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! EXP             [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! GREATEREQUAL    [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! GREATERTHAN     [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! LESSEQUAL       [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! LESSTHAN        [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! MINUS           [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! TIMES           [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! NOTEQUAL        [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! OR              [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! PLUS            [ reduce using rule 126 (expr2 -> expr OROR expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! OROR            [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 134

    (116) expr2 -> expr EQUALEQUAL expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    LBRACKET        reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    ANDAND          reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    COLON           reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    EQUALEQUAL      reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    GREATEREQUAL    reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    GREATERTHAN     reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    LESSEQUAL       reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    LESSTHAN        reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    NOTEQUAL        reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    OROR            reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    EQUALS          reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    OREQUALS        reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    COMMA           reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    SEMI            reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    error           reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    RBRACE          reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    CASE            reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    OTHERWISE       reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    END             reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    RBRACKET        reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    AND             shift and go to state 62
    LDIV            shift and go to state 56
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EXP             shift and go to state 67
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    OR              shift and go to state 64
    PLUS            shift and go to state 70

  ! FIELD           [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! TRANSPOSE       [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! LBRACE          [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! AND             [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! LDIV            [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! DIV             [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! DOT             [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! DOTDIV          [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! DOTEXP          [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! DOTMUL          [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! EXP             [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! MINUS           [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! TIMES           [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! OR              [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! PLUS            [ reduce using rule 116 (expr2 -> expr EQUALEQUAL expr .) ]
  ! LBRACKET        [ shift and go to state 68 ]
  ! ANDAND          [ shift and go to state 48 ]
  ! COLON           [ shift and go to state 51 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! GREATEREQUAL    [ shift and go to state 61 ]
  ! GREATERTHAN     [ shift and go to state 54 ]
  ! LESSEQUAL       [ shift and go to state 59 ]
  ! LESSTHAN        [ shift and go to state 58 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! OROR            [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 60 ]
  ! OREQUALS        [ shift and go to state 57 ]


state 135

    (61) exprs -> exprs COMMA expr .
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    COMMA           reduce using rule 61 (exprs -> exprs COMMA expr .)
    SEMI            reduce using rule 61 (exprs -> exprs COMMA expr .)
    RBRACE          reduce using rule 61 (exprs -> exprs COMMA expr .)
    RBRACKET        reduce using rule 61 (exprs -> exprs COMMA expr .)
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57


state 136

    (41) try_catch -> TRY stmt_list end .

    END             reduce using rule 41 (try_catch -> TRY stmt_list end .)
    CONTINUE        reduce using rule 41 (try_catch -> TRY stmt_list end .)
    BREAK           reduce using rule 41 (try_catch -> TRY stmt_list end .)
    GLOBAL          reduce using rule 41 (try_catch -> TRY stmt_list end .)
    IDENTIFIER      reduce using rule 41 (try_catch -> TRY stmt_list end .)
    FOR             reduce using rule 41 (try_catch -> TRY stmt_list end .)
    IF              reduce using rule 41 (try_catch -> TRY stmt_list end .)
    SEMI            reduce using rule 41 (try_catch -> TRY stmt_list end .)
    COMMA           reduce using rule 41 (try_catch -> TRY stmt_list end .)
    RETURN          reduce using rule 41 (try_catch -> TRY stmt_list end .)
    SWITCH          reduce using rule 41 (try_catch -> TRY stmt_list end .)
    TRY             reduce using rule 41 (try_catch -> TRY stmt_list end .)
    WHILE           reduce using rule 41 (try_catch -> TRY stmt_list end .)
    NOTEQUAL        reduce using rule 41 (try_catch -> TRY stmt_list end .)
    NOT             reduce using rule 41 (try_catch -> TRY stmt_list end .)
    LBRACKET        reduce using rule 41 (try_catch -> TRY stmt_list end .)
    NUMBER          reduce using rule 41 (try_catch -> TRY stmt_list end .)
    STRING          reduce using rule 41 (try_catch -> TRY stmt_list end .)
    COLON           reduce using rule 41 (try_catch -> TRY stmt_list end .)
    LBRACE          reduce using rule 41 (try_catch -> TRY stmt_list end .)
    MINUS           reduce using rule 41 (try_catch -> TRY stmt_list end .)
    PLUS            reduce using rule 41 (try_catch -> TRY stmt_list end .)
    FUNCTION        reduce using rule 41 (try_catch -> TRY stmt_list end .)
    $end            reduce using rule 41 (try_catch -> TRY stmt_list end .)
    CATCH           reduce using rule 41 (try_catch -> TRY stmt_list end .)
    ELSE            reduce using rule 41 (try_catch -> TRY stmt_list end .)
    ELSEIF          reduce using rule 41 (try_catch -> TRY stmt_list end .)
    CASE            reduce using rule 41 (try_catch -> TRY stmt_list end .)
    OTHERWISE       reduce using rule 41 (try_catch -> TRY stmt_list end .)


state 137

    (40) try_catch -> TRY stmt_list CATCH . stmt_list end
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 170
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    null_stmt                      shift and go to state 44
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    continue_stmt                  shift and go to state 42
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 138

    (85) end -> END .

    CONTINUE        reduce using rule 85 (end -> END .)
    BREAK           reduce using rule 85 (end -> END .)
    GLOBAL          reduce using rule 85 (end -> END .)
    IDENTIFIER      reduce using rule 85 (end -> END .)
    FOR             reduce using rule 85 (end -> END .)
    IF              reduce using rule 85 (end -> END .)
    SEMI            reduce using rule 85 (end -> END .)
    COMMA           reduce using rule 85 (end -> END .)
    RETURN          reduce using rule 85 (end -> END .)
    SWITCH          reduce using rule 85 (end -> END .)
    TRY             reduce using rule 85 (end -> END .)
    WHILE           reduce using rule 85 (end -> END .)
    NOTEQUAL        reduce using rule 85 (end -> END .)
    NOT             reduce using rule 85 (end -> END .)
    LBRACKET        reduce using rule 85 (end -> END .)
    NUMBER          reduce using rule 85 (end -> END .)
    STRING          reduce using rule 85 (end -> END .)
    COLON           reduce using rule 85 (end -> END .)
    LBRACE          reduce using rule 85 (end -> END .)
    MINUS           reduce using rule 85 (end -> END .)
    PLUS            reduce using rule 85 (end -> END .)
    FUNCTION        reduce using rule 85 (end -> END .)
    $end            reduce using rule 85 (end -> END .)
    CATCH           reduce using rule 85 (end -> END .)
    END             reduce using rule 85 (end -> END .)
    ELSE            reduce using rule 85 (end -> END .)
    ELSEIF          reduce using rule 85 (end -> END .)
    CASE            reduce using rule 85 (end -> END .)
    OTHERWISE       reduce using rule 85 (end -> END .)


state 139

    (63) while_stmt -> WHILE expr SEMI . stmt_list end
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 171
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 140

    (93) cellarray -> LBRACE concat_list RBRACE .

    FIELD           reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    TRANSPOSE       reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    LBRACE          reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    LBRACKET        reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    AND             reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    ANDAND          reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    LDIV            reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    COLON           reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    DIV             reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    DOT             reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    DOTDIV          reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    DOTEXP          reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    DOTMUL          reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    EQUALEQUAL      reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    EXP             reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    GREATEREQUAL    reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    GREATERTHAN     reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    LESSEQUAL       reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    LESSTHAN        reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    MINUS           reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    TIMES           reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    NOTEQUAL        reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    OR              reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    OROR            reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    PLUS            reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    EQUALS          reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    OREQUALS        reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    COMMA           reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    SEMI            reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    RBRACE          reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    CASE            reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    OTHERWISE       reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    END             reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    error           reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)
    RBRACKET        reduce using rule 93 (cellarray -> LBRACE concat_list RBRACE .)


state 141

    (94) cellarray -> LBRACE concat_list SEMI . RBRACE
    (57) concat_list -> concat_list SEMI . expr_list
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    RBRACE          shift and go to state 172
    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 1
    string                         shift and go to state 38
    expr1                          shift and go to state 43
    colon                          shift and go to state 16
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    expr_list                      shift and go to state 173
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 142

    (56) concat_list -> expr_list SEMI . expr_list
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 1
    string                         shift and go to state 38
    colon                          shift and go to state 16
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    expr_list                      shift and go to state 174
    expr1                          shift and go to state 43
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 143

    (92) cellarray -> LBRACE expr_list RBRACE .

    FIELD           reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    TRANSPOSE       reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    LBRACE          reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    LBRACKET        reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    AND             reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    ANDAND          reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    LDIV            reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    COLON           reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    DIV             reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    DOT             reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    DOTDIV          reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    DOTEXP          reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    DOTMUL          reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    EQUALEQUAL      reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    EXP             reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    GREATEREQUAL    reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    GREATERTHAN     reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    LESSEQUAL       reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    LESSTHAN        reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    MINUS           reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    TIMES           reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    NOTEQUAL        reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    OR              reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    OROR            reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    PLUS            reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    EQUALS          reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    OREQUALS        reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    COMMA           reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    SEMI            reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    RBRACE          reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    CASE            reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    OTHERWISE       reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    END             reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    error           reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)
    RBRACKET        reduce using rule 92 (cellarray -> LBRACE expr_list RBRACE .)


state 144

    (30) global_stmt -> GLOBAL global_list SEMI .

    CONTINUE        reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    BREAK           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    GLOBAL          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    IDENTIFIER      reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    FOR             reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    IF              reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    SEMI            reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    COMMA           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    RETURN          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    SWITCH          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    TRY             reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    WHILE           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    NOTEQUAL        reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    NOT             reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    LBRACKET        reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    NUMBER          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    STRING          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    COLON           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    LBRACE          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    MINUS           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    PLUS            reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    ELSE            reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    ELSEIF          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    END             reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    CASE            reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    OTHERWISE       reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    CATCH           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    FUNCTION        reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    $end            reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)


state 145

    (29) global_list -> global_list IDENTIFIER .

    SEMI            reduce using rule 29 (global_list -> global_list IDENTIFIER .)
    IDENTIFIER      reduce using rule 29 (global_list -> global_list IDENTIFIER .)


state 146

    (31) global_stmt -> GLOBAL IDENTIFIER EQUALS . expr SEMI
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 175
    colon                          shift and go to state 16
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 147

    (72) for_stmt -> FOR LBRACKET IDENTIFIER . EQUALS expr RBRACKET SEMI stmt_list end
    (75) expr -> IDENTIFIER .

    FIELD           reduce using rule 75 (expr -> IDENTIFIER .)
    TRANSPOSE       reduce using rule 75 (expr -> IDENTIFIER .)
    LBRACE          reduce using rule 75 (expr -> IDENTIFIER .)
    LBRACKET        reduce using rule 75 (expr -> IDENTIFIER .)
    AND             reduce using rule 75 (expr -> IDENTIFIER .)
    ANDAND          reduce using rule 75 (expr -> IDENTIFIER .)
    LDIV            reduce using rule 75 (expr -> IDENTIFIER .)
    COLON           reduce using rule 75 (expr -> IDENTIFIER .)
    DIV             reduce using rule 75 (expr -> IDENTIFIER .)
    DOT             reduce using rule 75 (expr -> IDENTIFIER .)
    DOTDIV          reduce using rule 75 (expr -> IDENTIFIER .)
    DOTEXP          reduce using rule 75 (expr -> IDENTIFIER .)
    DOTMUL          reduce using rule 75 (expr -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 75 (expr -> IDENTIFIER .)
    EXP             reduce using rule 75 (expr -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 75 (expr -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 75 (expr -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 75 (expr -> IDENTIFIER .)
    LESSTHAN        reduce using rule 75 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 75 (expr -> IDENTIFIER .)
    TIMES           reduce using rule 75 (expr -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 75 (expr -> IDENTIFIER .)
    OR              reduce using rule 75 (expr -> IDENTIFIER .)
    OROR            reduce using rule 75 (expr -> IDENTIFIER .)
    PLUS            reduce using rule 75 (expr -> IDENTIFIER .)
    EQUALS          reduce using rule 75 (expr -> IDENTIFIER .)
    OREQUALS        reduce using rule 75 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 75 (expr -> IDENTIFIER .)
    RBRACKET        reduce using rule 75 (expr -> IDENTIFIER .)
    SEMI            reduce using rule 75 (expr -> IDENTIFIER .)

  ! EQUALS          [ shift and go to state 176 ]


state 148

    (73) for_stmt -> FOR matrix EQUALS . expr SEMI stmt_list end
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 177
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    string                         shift and go to state 38
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 149

    (71) for_stmt -> FOR IDENTIFIER EQUALS . expr SEMI stmt_list end
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 178
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    string                         shift and go to state 38
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 150

    (4) top -> top func_decl end . semi_opt
    (6) semi_opt -> .
    (7) semi_opt -> . semi_opt SEMI
    (8) semi_opt -> . semi_opt COMMA

    SEMI            reduce using rule 6 (semi_opt -> .)
    COMMA           reduce using rule 6 (semi_opt -> .)
    FUNCTION        reduce using rule 6 (semi_opt -> .)
    $end            reduce using rule 6 (semi_opt -> .)

    semi_opt                       shift and go to state 179

state 151

    (5) top -> top func_decl stmt_list . end semi_opt
    (53) stmt_list_opt -> stmt_list .
    (55) stmt_list -> stmt_list . stmt
    (85) end -> . END
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    FUNCTION        reduce using rule 53 (stmt_list_opt -> stmt_list .)
    $end            reduce using rule 53 (stmt_list_opt -> stmt_list .)
    END             shift and go to state 138
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    end                            shift and go to state 180
    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 75
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    while_stmt                     shift and go to state 18

state 152

    (3) top -> top func_decl stmt_list_opt .

    FUNCTION        reduce using rule 3 (top -> top func_decl stmt_list_opt .)
    $end            reduce using rule 3 (top -> top func_decl stmt_list_opt .)


state 153

    (45) func_decl -> FUNCTION ret . EQUALS IDENTIFIER args_opt SEMI

    EQUALS          shift and go to state 181


state 154

    (44) func_decl -> FUNCTION IDENTIFIER . args_opt SEMI
    (49) ret -> IDENTIFIER .
    (46) args_opt -> .
    (47) args_opt -> . LBRACKET RBRACKET
    (48) args_opt -> . LBRACKET expr_list RBRACKET

    EQUALS          reduce using rule 49 (ret -> IDENTIFIER .)
    SEMI            reduce using rule 46 (args_opt -> .)
    LBRACKET        shift and go to state 183

    args_opt                       shift and go to state 182

state 155

    (50) ret -> LBRACKET . RBRACKET
    (51) ret -> LBRACKET . expr_list RBRACKET
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    RBRACKET        shift and go to state 184
    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 1
    string                         shift and go to state 38
    colon                          shift and go to state 16
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    expr_list                      shift and go to state 185
    expr1                          shift and go to state 43
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 156

    (35) switch_stmt -> SWITCH expr semi_opt . case_list end
    (7) semi_opt -> semi_opt . SEMI
    (8) semi_opt -> semi_opt . COMMA
    (36) case_list -> .
    (37) case_list -> . CASE expr sep stmt_list_opt case_list
    (38) case_list -> . CASE expr error stmt_list_opt case_list
    (39) case_list -> . OTHERWISE stmt_list

    SEMI            shift and go to state 187
    COMMA           shift and go to state 190
    END             reduce using rule 36 (case_list -> .)
    CASE            shift and go to state 189
    OTHERWISE       shift and go to state 188

    case_list                      shift and go to state 186

state 157

    (64) sep -> COMMA .

    CONTINUE        reduce using rule 64 (sep -> COMMA .)
    BREAK           reduce using rule 64 (sep -> COMMA .)
    GLOBAL          reduce using rule 64 (sep -> COMMA .)
    IDENTIFIER      reduce using rule 64 (sep -> COMMA .)
    FOR             reduce using rule 64 (sep -> COMMA .)
    IF              reduce using rule 64 (sep -> COMMA .)
    SEMI            reduce using rule 64 (sep -> COMMA .)
    COMMA           reduce using rule 64 (sep -> COMMA .)
    RETURN          reduce using rule 64 (sep -> COMMA .)
    SWITCH          reduce using rule 64 (sep -> COMMA .)
    TRY             reduce using rule 64 (sep -> COMMA .)
    WHILE           reduce using rule 64 (sep -> COMMA .)
    NOTEQUAL        reduce using rule 64 (sep -> COMMA .)
    NOT             reduce using rule 64 (sep -> COMMA .)
    LBRACKET        reduce using rule 64 (sep -> COMMA .)
    NUMBER          reduce using rule 64 (sep -> COMMA .)
    STRING          reduce using rule 64 (sep -> COMMA .)
    COLON           reduce using rule 64 (sep -> COMMA .)
    LBRACE          reduce using rule 64 (sep -> COMMA .)
    MINUS           reduce using rule 64 (sep -> COMMA .)
    PLUS            reduce using rule 64 (sep -> COMMA .)
    ELSE            reduce using rule 64 (sep -> COMMA .)
    ELSEIF          reduce using rule 64 (sep -> COMMA .)
    END             reduce using rule 64 (sep -> COMMA .)
    CASE            reduce using rule 64 (sep -> COMMA .)
    OTHERWISE       reduce using rule 64 (sep -> COMMA .)


state 158

    (65) sep -> SEMI .

    CONTINUE        reduce using rule 65 (sep -> SEMI .)
    BREAK           reduce using rule 65 (sep -> SEMI .)
    GLOBAL          reduce using rule 65 (sep -> SEMI .)
    IDENTIFIER      reduce using rule 65 (sep -> SEMI .)
    FOR             reduce using rule 65 (sep -> SEMI .)
    IF              reduce using rule 65 (sep -> SEMI .)
    SEMI            reduce using rule 65 (sep -> SEMI .)
    COMMA           reduce using rule 65 (sep -> SEMI .)
    RETURN          reduce using rule 65 (sep -> SEMI .)
    SWITCH          reduce using rule 65 (sep -> SEMI .)
    TRY             reduce using rule 65 (sep -> SEMI .)
    WHILE           reduce using rule 65 (sep -> SEMI .)
    NOTEQUAL        reduce using rule 65 (sep -> SEMI .)
    NOT             reduce using rule 65 (sep -> SEMI .)
    LBRACKET        reduce using rule 65 (sep -> SEMI .)
    NUMBER          reduce using rule 65 (sep -> SEMI .)
    STRING          reduce using rule 65 (sep -> SEMI .)
    COLON           reduce using rule 65 (sep -> SEMI .)
    LBRACE          reduce using rule 65 (sep -> SEMI .)
    MINUS           reduce using rule 65 (sep -> SEMI .)
    PLUS            reduce using rule 65 (sep -> SEMI .)
    ELSE            reduce using rule 65 (sep -> SEMI .)
    ELSEIF          reduce using rule 65 (sep -> SEMI .)
    END             reduce using rule 65 (sep -> SEMI .)
    CASE            reduce using rule 65 (sep -> SEMI .)
    OTHERWISE       reduce using rule 65 (sep -> SEMI .)


state 159

    (67) if_stmt -> IF expr error . stmt_list_opt elseif_stmt end
    (52) stmt_list_opt -> .
    (53) stmt_list_opt -> . stmt_list
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    ELSE            reduce using rule 52 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 52 (stmt_list_opt -> .)
    END             reduce using rule 52 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 191
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    while_stmt                     shift and go to state 18
    stmt_list_opt                  shift and go to state 192

state 160

    (66) if_stmt -> IF expr sep . stmt_list_opt elseif_stmt end
    (52) stmt_list_opt -> .
    (53) stmt_list_opt -> . stmt_list
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    ELSE            reduce using rule 52 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 52 (stmt_list_opt -> .)
    END             reduce using rule 52 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    global_stmt                    shift and go to state 30
    try_catch                      shift and go to state 32
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    for_stmt                       shift and go to state 7
    stmt_list                      shift and go to state 191
    return_stmt                    shift and go to state 5
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    while_stmt                     shift and go to state 18
    stmt_list_opt                  shift and go to state 193

state 161

    (100) expr -> LBRACKET expr RBRACKET .

    FIELD           reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    TRANSPOSE       reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    LBRACE          reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    ANDAND          reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    LDIV            reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    COLON           reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    DIV             reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    DOT             reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    DOTDIV          reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    DOTEXP          reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    DOTMUL          reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    EQUALEQUAL      reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    EXP             reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    GREATEREQUAL    reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    GREATERTHAN     reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    LESSEQUAL       reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    LESSTHAN        reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    NOTEQUAL        reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    OROR            reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    OREQUALS        reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    RBRACE          reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    SEMI            reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    CASE            reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    OTHERWISE       reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    END             reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    error           reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 100 (expr -> LBRACKET expr RBRACKET .)


state 162

    (96) matrix -> LBRACKET concat_list RBRACKET .

    FIELD           reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    TRANSPOSE       reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    LBRACE          reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    LBRACKET        reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    AND             reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    ANDAND          reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    LDIV            reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    COLON           reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    DIV             reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    DOT             reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTDIV          reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTEXP          reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTMUL          reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    EQUALEQUAL      reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    EXP             reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    GREATEREQUAL    reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    GREATERTHAN     reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    LESSEQUAL       reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    LESSTHAN        reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    MINUS           reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    TIMES           reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    NOTEQUAL        reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    OR              reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    OROR            reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    PLUS            reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    EQUALS          reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    OREQUALS        reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    COMMA           reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    SEMI            reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    RBRACE          reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    CASE            reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    OTHERWISE       reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    END             reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    error           reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)
    RBRACKET        reduce using rule 96 (matrix -> LBRACKET concat_list RBRACKET .)


state 163

    (97) matrix -> LBRACKET concat_list SEMI . RBRACKET
    (57) concat_list -> concat_list SEMI . expr_list
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    RBRACKET        shift and go to state 194
    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 1
    string                         shift and go to state 38
    expr1                          shift and go to state 43
    colon                          shift and go to state 16
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    expr_list                      shift and go to state 173
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 164

    (98) matrix -> LBRACKET expr_list RBRACKET .

    FIELD           reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    TRANSPOSE       reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    LBRACKET        reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    ANDAND          reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    LDIV            reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    DOT             reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTDIV          reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTEXP          reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTMUL          reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    EQUALEQUAL      reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    EXP             reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    GREATEREQUAL    reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    GREATERTHAN     reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    LESSEQUAL       reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    LESSTHAN        reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    TIMES           reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    NOTEQUAL        reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    OROR            reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    PLUS            reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    EQUALS          reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    OREQUALS        reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    SEMI            reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    RBRACE          reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    CASE            reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    OTHERWISE       reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    END             reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    error           reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 98 (matrix -> LBRACKET expr_list RBRACKET .)


state 165

    (99) matrix -> LBRACKET expr_list SEMI . RBRACKET
    (56) concat_list -> expr_list SEMI . expr_list
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    RBRACKET        shift and go to state 195
    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 1
    string                         shift and go to state 38
    colon                          shift and go to state 16
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    expr_list                      shift and go to state 174
    expr1                          shift and go to state 43
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 166

    (26) args -> args arg1 .

    SEMI            reduce using rule 26 (args -> args arg1 .)
    STRING          reduce using rule 26 (args -> args arg1 .)
    NUMBER          reduce using rule 26 (args -> args arg1 .)
    IDENTIFIER      reduce using rule 26 (args -> args arg1 .)
    GLOBAL          reduce using rule 26 (args -> args arg1 .)


state 167

    (27) command -> IDENTIFIER args SEMI .

    CATCH           reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    END             reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    CONTINUE        reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    BREAK           reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    GLOBAL          reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    IDENTIFIER      reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    FOR             reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    IF              reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    SEMI            reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    COMMA           reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    RETURN          reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    SWITCH          reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    TRY             reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    WHILE           reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    NOTEQUAL        reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    NOT             reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    LBRACKET        reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    NUMBER          reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    STRING          reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    COLON           reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    LBRACE          reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    MINUS           reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    PLUS            reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    FUNCTION        reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    $end            reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    ELSE            reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    ELSEIF          reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    CASE            reduce using rule 27 (command -> IDENTIFIER args SEMI .)
    OTHERWISE       reduce using rule 27 (command -> IDENTIFIER args SEMI .)


state 168

    (103) expr -> expr LBRACE expr_list RBRACE .

    FIELD           reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    TRANSPOSE       reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    LBRACE          reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    LBRACKET        reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    AND             reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    ANDAND          reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    LDIV            reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    COLON           reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    DIV             reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    DOT             reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    DOTDIV          reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    DOTEXP          reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    DOTMUL          reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    EQUALEQUAL      reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    EXP             reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    GREATEREQUAL    reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    GREATERTHAN     reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    LESSEQUAL       reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    LESSTHAN        reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    MINUS           reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    TIMES           reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    NOTEQUAL        reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    OR              reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    OROR            reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    PLUS            reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    EQUALS          reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    OREQUALS        reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    COMMA           reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    RBRACE          reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    SEMI            reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    CASE            reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    OTHERWISE       reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    END             reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    error           reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)
    RBRACKET        reduce using rule 103 (expr -> expr LBRACE expr_list RBRACE .)


state 169

    (105) expr -> expr LBRACKET expr_list RBRACKET .

    FIELD           reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    TRANSPOSE       reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    LBRACKET        reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    ANDAND          reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    LDIV            reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    DOT             reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    DOTDIV          reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    DOTEXP          reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    DOTMUL          reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    EQUALEQUAL      reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    EXP             reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    GREATEREQUAL    reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    GREATERTHAN     reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    LESSEQUAL       reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    LESSTHAN        reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    TIMES           reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    NOTEQUAL        reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    OROR            reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    PLUS            reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    EQUALS          reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    OREQUALS        reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    RBRACE          reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    SEMI            reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    CASE            reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    OTHERWISE       reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    END             reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    error           reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 105 (expr -> expr LBRACKET expr_list RBRACKET .)


state 170

    (40) try_catch -> TRY stmt_list CATCH stmt_list . end
    (55) stmt_list -> stmt_list . stmt
    (85) end -> . END
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    END             shift and go to state 138
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    end                            shift and go to state 196
    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 75
    null_stmt                      shift and go to state 44
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    continue_stmt                  shift and go to state 42
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 171

    (63) while_stmt -> WHILE expr SEMI stmt_list . end
    (55) stmt_list -> stmt_list . stmt
    (85) end -> . END
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    END             shift and go to state 138
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    end                            shift and go to state 197
    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 75
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 172

    (94) cellarray -> LBRACE concat_list SEMI RBRACE .

    FIELD           reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    TRANSPOSE       reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    LBRACE          reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    LBRACKET        reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    AND             reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    ANDAND          reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    LDIV            reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    COLON           reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DIV             reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DOT             reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DOTDIV          reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DOTEXP          reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DOTMUL          reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    EQUALEQUAL      reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    EXP             reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    GREATEREQUAL    reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    GREATERTHAN     reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    LESSEQUAL       reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    LESSTHAN        reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    MINUS           reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    TIMES           reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    NOTEQUAL        reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    OR              reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    OROR            reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    PLUS            reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    EQUALS          reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    OREQUALS        reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    COMMA           reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    SEMI            reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    RBRACE          reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    CASE            reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    OTHERWISE       reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    END             reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    error           reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    RBRACKET        reduce using rule 94 (cellarray -> LBRACE concat_list SEMI RBRACE .)


state 173

    (57) concat_list -> concat_list SEMI expr_list .

    RBRACE          reduce using rule 57 (concat_list -> concat_list SEMI expr_list .)
    SEMI            reduce using rule 57 (concat_list -> concat_list SEMI expr_list .)
    RBRACKET        reduce using rule 57 (concat_list -> concat_list SEMI expr_list .)


state 174

    (56) concat_list -> expr_list SEMI expr_list .

    RBRACE          reduce using rule 56 (concat_list -> expr_list SEMI expr_list .)
    SEMI            reduce using rule 56 (concat_list -> expr_list SEMI expr_list .)
    RBRACKET        reduce using rule 56 (concat_list -> expr_list SEMI expr_list .)


state 175

    (31) global_stmt -> GLOBAL IDENTIFIER EQUALS expr . SEMI
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    SEMI            shift and go to state 198
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57


state 176

    (72) for_stmt -> FOR LBRACKET IDENTIFIER EQUALS . expr RBRACKET SEMI stmt_list end
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 199
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    string                         shift and go to state 38
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 177

    (73) for_stmt -> FOR matrix EQUALS expr . SEMI stmt_list end
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    SEMI            shift and go to state 200
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57


state 178

    (71) for_stmt -> FOR IDENTIFIER EQUALS expr . SEMI stmt_list end
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    SEMI            shift and go to state 201
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57


state 179

    (4) top -> top func_decl end semi_opt .
    (7) semi_opt -> semi_opt . SEMI
    (8) semi_opt -> semi_opt . COMMA

    FUNCTION        reduce using rule 4 (top -> top func_decl end semi_opt .)
    $end            reduce using rule 4 (top -> top func_decl end semi_opt .)
    SEMI            shift and go to state 187
    COMMA           shift and go to state 190


state 180

    (5) top -> top func_decl stmt_list end . semi_opt
    (6) semi_opt -> .
    (7) semi_opt -> . semi_opt SEMI
    (8) semi_opt -> . semi_opt COMMA

    SEMI            reduce using rule 6 (semi_opt -> .)
    COMMA           reduce using rule 6 (semi_opt -> .)
    FUNCTION        reduce using rule 6 (semi_opt -> .)
    $end            reduce using rule 6 (semi_opt -> .)

    semi_opt                       shift and go to state 202

state 181

    (45) func_decl -> FUNCTION ret EQUALS . IDENTIFIER args_opt SEMI

    IDENTIFIER      shift and go to state 203


state 182

    (44) func_decl -> FUNCTION IDENTIFIER args_opt . SEMI

    SEMI            shift and go to state 204


state 183

    (47) args_opt -> LBRACKET . RBRACKET
    (48) args_opt -> LBRACKET . expr_list RBRACKET
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    RBRACKET        shift and go to state 205
    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 1
    string                         shift and go to state 38
    colon                          shift and go to state 16
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    expr_list                      shift and go to state 206
    expr1                          shift and go to state 43
    matrix                         shift and go to state 45
    number                         shift and go to state 31

state 184

    (50) ret -> LBRACKET RBRACKET .

    EQUALS          reduce using rule 50 (ret -> LBRACKET RBRACKET .)


state 185

    (51) ret -> LBRACKET expr_list . RBRACKET

    RBRACKET        shift and go to state 207


state 186

    (35) switch_stmt -> SWITCH expr semi_opt case_list . end
    (85) end -> . END

    END             shift and go to state 138

    end                            shift and go to state 208

state 187

    (7) semi_opt -> semi_opt SEMI .

    SEMI            reduce using rule 7 (semi_opt -> semi_opt SEMI .)
    COMMA           reduce using rule 7 (semi_opt -> semi_opt SEMI .)
    CASE            reduce using rule 7 (semi_opt -> semi_opt SEMI .)
    OTHERWISE       reduce using rule 7 (semi_opt -> semi_opt SEMI .)
    END             reduce using rule 7 (semi_opt -> semi_opt SEMI .)
    FUNCTION        reduce using rule 7 (semi_opt -> semi_opt SEMI .)
    $end            reduce using rule 7 (semi_opt -> semi_opt SEMI .)


state 188

    (39) case_list -> OTHERWISE . stmt_list
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 209
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    null_stmt                      shift and go to state 44
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    continue_stmt                  shift and go to state 42
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 189

    (37) case_list -> CASE . expr sep stmt_list_opt case_list
    (38) case_list -> CASE . expr error stmt_list_opt case_list
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 210
    colon                          shift and go to state 16
    string                         shift and go to state 38
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    number                         shift and go to state 31
    matrix                         shift and go to state 45

state 190

    (8) semi_opt -> semi_opt COMMA .

    SEMI            reduce using rule 8 (semi_opt -> semi_opt COMMA .)
    COMMA           reduce using rule 8 (semi_opt -> semi_opt COMMA .)
    CASE            reduce using rule 8 (semi_opt -> semi_opt COMMA .)
    OTHERWISE       reduce using rule 8 (semi_opt -> semi_opt COMMA .)
    END             reduce using rule 8 (semi_opt -> semi_opt COMMA .)
    FUNCTION        reduce using rule 8 (semi_opt -> semi_opt COMMA .)
    $end            reduce using rule 8 (semi_opt -> semi_opt COMMA .)


state 191

    (53) stmt_list_opt -> stmt_list .
    (55) stmt_list -> stmt_list . stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    ELSE            reduce using rule 53 (stmt_list_opt -> stmt_list .)
    ELSEIF          reduce using rule 53 (stmt_list_opt -> stmt_list .)
    END             reduce using rule 53 (stmt_list_opt -> stmt_list .)
    CASE            reduce using rule 53 (stmt_list_opt -> stmt_list .)
    OTHERWISE       reduce using rule 53 (stmt_list_opt -> stmt_list .)
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 75
    null_stmt                      shift and go to state 44
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    continue_stmt                  shift and go to state 42
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 192

    (67) if_stmt -> IF expr error stmt_list_opt . elseif_stmt end
    (68) elseif_stmt -> .
    (69) elseif_stmt -> . ELSE stmt_list_opt
    (70) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt

    END             reduce using rule 68 (elseif_stmt -> .)
    ELSE            shift and go to state 213
    ELSEIF          shift and go to state 212

    elseif_stmt                    shift and go to state 211

state 193

    (66) if_stmt -> IF expr sep stmt_list_opt . elseif_stmt end
    (68) elseif_stmt -> .
    (69) elseif_stmt -> . ELSE stmt_list_opt
    (70) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt

    END             reduce using rule 68 (elseif_stmt -> .)
    ELSE            shift and go to state 213
    ELSEIF          shift and go to state 212

    elseif_stmt                    shift and go to state 214

state 194

    (97) matrix -> LBRACKET concat_list SEMI RBRACKET .

    FIELD           reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    TRANSPOSE       reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LBRACE          reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LBRACKET        reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    AND             reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    ANDAND          reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LDIV            reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    COLON           reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DIV             reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOT             reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTDIV          reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTEXP          reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTMUL          reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EQUALEQUAL      reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EXP             reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    GREATEREQUAL    reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    GREATERTHAN     reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LESSEQUAL       reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LESSTHAN        reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MINUS           reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    TIMES           reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    NOTEQUAL        reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OR              reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OROR            reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    PLUS            reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EQUALS          reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OREQUALS        reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    COMMA           reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    SEMI            reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    RBRACE          reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    CASE            reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OTHERWISE       reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    END             reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    error           reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    RBRACKET        reduce using rule 97 (matrix -> LBRACKET concat_list SEMI RBRACKET .)


state 195

    (99) matrix -> LBRACKET expr_list SEMI RBRACKET .

    FIELD           reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    TRANSPOSE       reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LBRACE          reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LBRACKET        reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    AND             reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    ANDAND          reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LDIV            reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    COLON           reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DIV             reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOT             reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTDIV          reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTEXP          reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTMUL          reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EQUALEQUAL      reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EXP             reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    GREATEREQUAL    reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    GREATERTHAN     reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LESSEQUAL       reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LESSTHAN        reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MINUS           reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    TIMES           reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    NOTEQUAL        reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OR              reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OROR            reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    PLUS            reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EQUALS          reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OREQUALS        reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    COMMA           reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    SEMI            reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    RBRACE          reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    CASE            reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OTHERWISE       reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    END             reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    error           reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    RBRACKET        reduce using rule 99 (matrix -> LBRACKET expr_list SEMI RBRACKET .)


state 196

    (40) try_catch -> TRY stmt_list CATCH stmt_list end .

    END             reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    CONTINUE        reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    BREAK           reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    GLOBAL          reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    IDENTIFIER      reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    FOR             reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    IF              reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    SEMI            reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    COMMA           reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    RETURN          reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    SWITCH          reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    TRY             reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    WHILE           reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    NOTEQUAL        reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    NOT             reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    LBRACKET        reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    NUMBER          reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    STRING          reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    COLON           reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    LBRACE          reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    MINUS           reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    PLUS            reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    FUNCTION        reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    $end            reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    CATCH           reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    ELSE            reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    ELSEIF          reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    CASE            reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)
    OTHERWISE       reduce using rule 40 (try_catch -> TRY stmt_list CATCH stmt_list end .)


state 197

    (63) while_stmt -> WHILE expr SEMI stmt_list end .

    END             reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    CONTINUE        reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    BREAK           reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    GLOBAL          reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    IDENTIFIER      reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    FOR             reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    IF              reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    SEMI            reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    COMMA           reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    RETURN          reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    SWITCH          reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    TRY             reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    WHILE           reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    NOTEQUAL        reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    NOT             reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    LBRACKET        reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    NUMBER          reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    STRING          reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    COLON           reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    LBRACE          reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    MINUS           reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    PLUS            reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    ELSE            reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    ELSEIF          reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    FUNCTION        reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    $end            reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    CASE            reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    OTHERWISE       reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)
    CATCH           reduce using rule 63 (while_stmt -> WHILE expr SEMI stmt_list end .)


state 198

    (31) global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .

    CONTINUE        reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    BREAK           reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    GLOBAL          reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    IDENTIFIER      reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    FOR             reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    IF              reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    SEMI            reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    COMMA           reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    RETURN          reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    SWITCH          reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    TRY             reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    WHILE           reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    NOTEQUAL        reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    NOT             reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    LBRACKET        reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    NUMBER          reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    STRING          reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    COLON           reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    LBRACE          reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    MINUS           reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    PLUS            reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    ELSE            reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    ELSEIF          reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    END             reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    CASE            reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    OTHERWISE       reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    CATCH           reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    FUNCTION        reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)
    $end            reduce using rule 31 (global_stmt -> GLOBAL IDENTIFIER EQUALS expr SEMI .)


state 199

    (72) for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr . RBRACKET SEMI stmt_list end
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr

    RBRACKET        shift and go to state 215
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57


state 200

    (73) for_stmt -> FOR matrix EQUALS expr SEMI . stmt_list end
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 216
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    while_stmt                     shift and go to state 18

state 201

    (71) for_stmt -> FOR IDENTIFIER EQUALS expr SEMI . stmt_list end
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 217
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 202

    (5) top -> top func_decl stmt_list end semi_opt .
    (7) semi_opt -> semi_opt . SEMI
    (8) semi_opt -> semi_opt . COMMA

    FUNCTION        reduce using rule 5 (top -> top func_decl stmt_list end semi_opt .)
    $end            reduce using rule 5 (top -> top func_decl stmt_list end semi_opt .)
    SEMI            shift and go to state 187
    COMMA           shift and go to state 190


state 203

    (45) func_decl -> FUNCTION ret EQUALS IDENTIFIER . args_opt SEMI
    (46) args_opt -> .
    (47) args_opt -> . LBRACKET RBRACKET
    (48) args_opt -> . LBRACKET expr_list RBRACKET

    SEMI            reduce using rule 46 (args_opt -> .)
    LBRACKET        shift and go to state 183

    args_opt                       shift and go to state 218

state 204

    (44) func_decl -> FUNCTION IDENTIFIER args_opt SEMI .

    END             reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    CONTINUE        reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    BREAK           reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    GLOBAL          reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    IDENTIFIER      reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    FOR             reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    IF              reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    SEMI            reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    COMMA           reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    RETURN          reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    SWITCH          reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    TRY             reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    WHILE           reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    NOTEQUAL        reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    NOT             reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    LBRACKET        reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    NUMBER          reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    STRING          reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    COLON           reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    LBRACE          reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    MINUS           reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    PLUS            reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    FUNCTION        reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)
    $end            reduce using rule 44 (func_decl -> FUNCTION IDENTIFIER args_opt SEMI .)


state 205

    (47) args_opt -> LBRACKET RBRACKET .

    SEMI            reduce using rule 47 (args_opt -> LBRACKET RBRACKET .)


state 206

    (48) args_opt -> LBRACKET expr_list . RBRACKET

    RBRACKET        shift and go to state 219


state 207

    (51) ret -> LBRACKET expr_list RBRACKET .

    EQUALS          reduce using rule 51 (ret -> LBRACKET expr_list RBRACKET .)


state 208

    (35) switch_stmt -> SWITCH expr semi_opt case_list end .

    CONTINUE        reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    BREAK           reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    GLOBAL          reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    IDENTIFIER      reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    FOR             reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    IF              reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    SEMI            reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    COMMA           reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    RETURN          reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    SWITCH          reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    TRY             reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    WHILE           reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    NOTEQUAL        reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    NOT             reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    LBRACKET        reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    NUMBER          reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    STRING          reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    COLON           reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    LBRACE          reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    MINUS           reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    PLUS            reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    ELSE            reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    ELSEIF          reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    END             reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    CASE            reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    OTHERWISE       reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    FUNCTION        reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    $end            reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)
    CATCH           reduce using rule 35 (switch_stmt -> SWITCH expr semi_opt case_list end .)


state 209

    (39) case_list -> OTHERWISE stmt_list .
    (55) stmt_list -> stmt_list . stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    END             reduce using rule 39 (case_list -> OTHERWISE stmt_list .)
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 75
    null_stmt                      shift and go to state 44
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    continue_stmt                  shift and go to state 42
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 210

    (37) case_list -> CASE expr . sep stmt_list_opt case_list
    (38) case_list -> CASE expr . error stmt_list_opt case_list
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr
    (64) sep -> . COMMA
    (65) sep -> . SEMI

    error           shift and go to state 220
    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57
    COMMA           shift and go to state 157
    SEMI            shift and go to state 158

    sep                            shift and go to state 221

state 211

    (67) if_stmt -> IF expr error stmt_list_opt elseif_stmt . end
    (85) end -> . END

    END             shift and go to state 138

    end                            shift and go to state 222

state 212

    (70) elseif_stmt -> ELSEIF . expr sep stmt_list_opt elseif_stmt
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    IDENTIFIER      shift and go to state 78
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    cellarray                      shift and go to state 3
    expr                           shift and go to state 223
    colon                          shift and go to state 16
    string                         shift and go to state 38
    expr1                          shift and go to state 43
    expr2                          shift and go to state 29
    number                         shift and go to state 31
    matrix                         shift and go to state 45

state 213

    (69) elseif_stmt -> ELSE . stmt_list_opt
    (52) stmt_list_opt -> .
    (53) stmt_list_opt -> . stmt_list
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    END             reduce using rule 52 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 191
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    null_stmt                      shift and go to state 44
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    continue_stmt                  shift and go to state 42
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45
    stmt_list_opt                  shift and go to state 224

state 214

    (66) if_stmt -> IF expr sep stmt_list_opt elseif_stmt . end
    (85) end -> . END

    END             shift and go to state 138

    end                            shift and go to state 225

state 215

    (72) for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET . SEMI stmt_list end

    SEMI            shift and go to state 226


state 216

    (73) for_stmt -> FOR matrix EQUALS expr SEMI stmt_list . end
    (55) stmt_list -> stmt_list . stmt
    (85) end -> . END
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    END             shift and go to state 138
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    end                            shift and go to state 227
    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 75
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    while_stmt                     shift and go to state 18

state 217

    (71) for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list . end
    (55) stmt_list -> stmt_list . stmt
    (85) end -> . END
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    END             shift and go to state 138
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    end                            shift and go to state 228
    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 75
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 218

    (45) func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt . SEMI

    SEMI            shift and go to state 229


state 219

    (48) args_opt -> LBRACKET expr_list RBRACKET .

    SEMI            reduce using rule 48 (args_opt -> LBRACKET expr_list RBRACKET .)


state 220

    (38) case_list -> CASE expr error . stmt_list_opt case_list
    (52) stmt_list_opt -> .
    (53) stmt_list_opt -> . stmt_list
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    CASE            reduce using rule 52 (stmt_list_opt -> .)
    OTHERWISE       reduce using rule 52 (stmt_list_opt -> .)
    END             reduce using rule 52 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 191
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    while_stmt                     shift and go to state 18
    stmt_list_opt                  shift and go to state 230

state 221

    (37) case_list -> CASE expr sep . stmt_list_opt case_list
    (52) stmt_list_opt -> .
    (53) stmt_list_opt -> . stmt_list
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    CASE            reduce using rule 52 (stmt_list_opt -> .)
    OTHERWISE       reduce using rule 52 (stmt_list_opt -> .)
    END             reduce using rule 52 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 191
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    null_stmt                      shift and go to state 44
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    switch_stmt                    shift and go to state 41
    continue_stmt                  shift and go to state 42
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    while_stmt                     shift and go to state 18
    stmt_list_opt                  shift and go to state 231

state 222

    (67) if_stmt -> IF expr error stmt_list_opt elseif_stmt end .

    END             reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    CONTINUE        reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    BREAK           reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    GLOBAL          reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    IDENTIFIER      reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    FOR             reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    IF              reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    SEMI            reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    COMMA           reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    RETURN          reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    SWITCH          reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    TRY             reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    WHILE           reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    NOTEQUAL        reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    NOT             reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    LBRACKET        reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    NUMBER          reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    STRING          reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    COLON           reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    LBRACE          reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    MINUS           reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    PLUS            reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    FUNCTION        reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    $end            reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    ELSE            reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    ELSEIF          reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    CATCH           reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    CASE            reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)
    OTHERWISE       reduce using rule 67 (if_stmt -> IF expr error stmt_list_opt elseif_stmt end .)


state 223

    (70) elseif_stmt -> ELSEIF expr . sep stmt_list_opt elseif_stmt
    (101) expr -> expr . FIELD
    (102) expr -> expr . TRANSPOSE
    (103) expr -> expr . LBRACE expr_list RBRACE
    (104) expr -> expr . LBRACE RBRACE
    (105) expr -> expr . LBRACKET expr_list RBRACKET
    (106) expr -> expr . LBRACKET RBRACKET
    (107) expr2 -> expr . AND expr
    (108) expr2 -> expr . ANDAND expr
    (109) expr2 -> expr . LDIV expr
    (110) expr2 -> expr . COLON expr
    (111) expr2 -> expr . DIV expr
    (112) expr2 -> expr . DOT expr
    (113) expr2 -> expr . DOTDIV expr
    (114) expr2 -> expr . DOTEXP expr
    (115) expr2 -> expr . DOTMUL expr
    (116) expr2 -> expr . EQUALEQUAL expr
    (117) expr2 -> expr . EXP expr
    (118) expr2 -> expr . GREATEREQUAL expr
    (119) expr2 -> expr . GREATERTHAN expr
    (120) expr2 -> expr . LESSEQUAL expr
    (121) expr2 -> expr . LESSTHAN expr
    (122) expr2 -> expr . MINUS expr
    (123) expr2 -> expr . TIMES expr
    (124) expr2 -> expr . NOTEQUAL expr
    (125) expr2 -> expr . OR expr
    (126) expr2 -> expr . OROR expr
    (127) expr2 -> expr . PLUS expr
    (128) expr2 -> expr . EQUALS expr
    (129) expr2 -> expr . OREQUALS expr
    (64) sep -> . COMMA
    (65) sep -> . SEMI

    FIELD           shift and go to state 50
    TRANSPOSE       shift and go to state 53
    LBRACE          shift and go to state 63
    LBRACKET        shift and go to state 68
    AND             shift and go to state 62
    ANDAND          shift and go to state 48
    LDIV            shift and go to state 56
    COLON           shift and go to state 51
    DIV             shift and go to state 49
    DOT             shift and go to state 66
    DOTDIV          shift and go to state 65
    DOTEXP          shift and go to state 55
    DOTMUL          shift and go to state 47
    EQUALEQUAL      shift and go to state 73
    EXP             shift and go to state 67
    GREATEREQUAL    shift and go to state 61
    GREATERTHAN     shift and go to state 54
    LESSEQUAL       shift and go to state 59
    LESSTHAN        shift and go to state 58
    MINUS           shift and go to state 71
    TIMES           shift and go to state 52
    NOTEQUAL        shift and go to state 69
    OR              shift and go to state 64
    OROR            shift and go to state 72
    PLUS            shift and go to state 70
    EQUALS          shift and go to state 60
    OREQUALS        shift and go to state 57
    COMMA           shift and go to state 157
    SEMI            shift and go to state 158

    sep                            shift and go to state 232

state 224

    (69) elseif_stmt -> ELSE stmt_list_opt .

    END             reduce using rule 69 (elseif_stmt -> ELSE stmt_list_opt .)


state 225

    (66) if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .

    END             reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    CONTINUE        reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    BREAK           reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    GLOBAL          reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    IDENTIFIER      reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    FOR             reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    IF              reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    SEMI            reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    COMMA           reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    RETURN          reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    SWITCH          reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    TRY             reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    WHILE           reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    NOTEQUAL        reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    NOT             reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    LBRACKET        reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    NUMBER          reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    STRING          reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    COLON           reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    LBRACE          reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    MINUS           reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    PLUS            reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    FUNCTION        reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    $end            reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    ELSE            reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    ELSEIF          reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    CATCH           reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    CASE            reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)
    OTHERWISE       reduce using rule 66 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt end .)


state 226

    (72) for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI . stmt_list end
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 233
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 227

    (73) for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .

    CATCH           reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    END             reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    CONTINUE        reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    BREAK           reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    GLOBAL          reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    IDENTIFIER      reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    FOR             reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    IF              reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    SEMI            reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    COMMA           reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    RETURN          reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    SWITCH          reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    TRY             reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    WHILE           reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    NOTEQUAL        reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    NOT             reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    LBRACKET        reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    NUMBER          reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    STRING          reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    COLON           reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    LBRACE          reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    MINUS           reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    PLUS            reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    ELSE            reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    ELSEIF          reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    FUNCTION        reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    $end            reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    CASE            reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)
    OTHERWISE       reduce using rule 73 (for_stmt -> FOR matrix EQUALS expr SEMI stmt_list end .)


state 228

    (71) for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .

    CATCH           reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    END             reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    CONTINUE        reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    BREAK           reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    GLOBAL          reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    IDENTIFIER      reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    FOR             reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    IF              reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    SEMI            reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    COMMA           reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    RETURN          reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    SWITCH          reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    TRY             reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    WHILE           reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    NOTEQUAL        reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    NOT             reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    LBRACKET        reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    NUMBER          reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    STRING          reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    COLON           reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    LBRACE          reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    MINUS           reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    PLUS            reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    ELSE            reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    ELSEIF          reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    FUNCTION        reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    $end            reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    CASE            reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)
    OTHERWISE       reduce using rule 71 (for_stmt -> FOR IDENTIFIER EQUALS expr SEMI stmt_list end .)


state 229

    (45) func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .

    END             reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    CONTINUE        reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    BREAK           reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    GLOBAL          reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    IDENTIFIER      reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    FOR             reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    IF              reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    SEMI            reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    COMMA           reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    RETURN          reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    SWITCH          reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    TRY             reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    WHILE           reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    NOTEQUAL        reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    NOT             reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    LBRACKET        reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    NUMBER          reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    STRING          reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    COLON           reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    LBRACE          reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    MINUS           reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    PLUS            reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    FUNCTION        reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)
    $end            reduce using rule 45 (func_decl -> FUNCTION ret EQUALS IDENTIFIER args_opt SEMI .)


state 230

    (38) case_list -> CASE expr error stmt_list_opt . case_list
    (36) case_list -> .
    (37) case_list -> . CASE expr sep stmt_list_opt case_list
    (38) case_list -> . CASE expr error stmt_list_opt case_list
    (39) case_list -> . OTHERWISE stmt_list

    END             reduce using rule 36 (case_list -> .)
    CASE            shift and go to state 189
    OTHERWISE       shift and go to state 188

    case_list                      shift and go to state 234

state 231

    (37) case_list -> CASE expr sep stmt_list_opt . case_list
    (36) case_list -> .
    (37) case_list -> . CASE expr sep stmt_list_opt case_list
    (38) case_list -> . CASE expr error stmt_list_opt case_list
    (39) case_list -> . OTHERWISE stmt_list

    END             reduce using rule 36 (case_list -> .)
    CASE            shift and go to state 189
    OTHERWISE       shift and go to state 188

    case_list                      shift and go to state 235

state 232

    (70) elseif_stmt -> ELSEIF expr sep . stmt_list_opt elseif_stmt
    (52) stmt_list_opt -> .
    (53) stmt_list_opt -> . stmt_list
    (54) stmt_list -> . stmt
    (55) stmt_list -> . stmt_list stmt
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    ELSE            reduce using rule 52 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 52 (stmt_list_opt -> .)
    END             reduce using rule 52 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 191
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 13
    null_stmt                      shift and go to state 44
    string                         shift and go to state 38
    matrix                         shift and go to state 45
    switch_stmt                    shift and go to state 41
    continue_stmt                  shift and go to state 42
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    while_stmt                     shift and go to state 18
    stmt_list_opt                  shift and go to state 236

state 233

    (72) for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list . end
    (55) stmt_list -> stmt_list . stmt
    (85) end -> . END
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (33) continue_stmt -> . CONTINUE SEMI
    (34) break_stmt -> . BREAK SEMI
    (62) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (31) global_stmt -> . GLOBAL IDENTIFIER EQUALS expr SEMI
    (27) command -> . IDENTIFIER args SEMI
    (71) for_stmt -> . FOR IDENTIFIER EQUALS expr SEMI stmt_list end
    (72) for_stmt -> . FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end
    (73) for_stmt -> . FOR matrix EQUALS expr SEMI stmt_list end
    (66) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt end
    (67) if_stmt -> . IF expr error stmt_list_opt elseif_stmt end
    (42) null_stmt -> . SEMI
    (43) null_stmt -> . COMMA
    (32) return_stmt -> . RETURN SEMI
    (35) switch_stmt -> . SWITCH expr semi_opt case_list end
    (40) try_catch -> . TRY stmt_list CATCH stmt_list end
    (41) try_catch -> . TRY stmt_list end
    (63) while_stmt -> . WHILE expr SEMI stmt_list end
    (58) expr_list -> . exprs
    (59) expr_list -> . exprs COMMA
    (60) exprs -> . expr
    (61) exprs -> . exprs COMMA expr
    (75) expr -> . IDENTIFIER
    (76) expr -> . number
    (77) expr -> . string
    (78) expr -> . colon
    (79) expr -> . NOTEQUAL
    (80) expr -> . NOT
    (81) expr -> . matrix
    (82) expr -> . cellarray
    (83) expr -> . expr2
    (84) expr -> . expr1
    (100) expr -> . LBRACKET expr RBRACKET
    (101) expr -> . expr FIELD
    (102) expr -> . expr TRANSPOSE
    (103) expr -> . expr LBRACE expr_list RBRACE
    (104) expr -> . expr LBRACE RBRACE
    (105) expr -> . expr LBRACKET expr_list RBRACKET
    (106) expr -> . expr LBRACKET RBRACKET
    (74) number -> . NUMBER
    (86) string -> . STRING
    (87) colon -> . COLON
    (95) matrix -> . LBRACKET RBRACKET
    (96) matrix -> . LBRACKET concat_list RBRACKET
    (97) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (98) matrix -> . LBRACKET expr_list RBRACKET
    (99) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (91) cellarray -> . LBRACE RBRACE
    (92) cellarray -> . LBRACE expr_list RBRACE
    (93) cellarray -> . LBRACE concat_list RBRACE
    (94) cellarray -> . LBRACE concat_list SEMI RBRACE
    (107) expr2 -> . expr AND expr
    (108) expr2 -> . expr ANDAND expr
    (109) expr2 -> . expr LDIV expr
    (110) expr2 -> . expr COLON expr
    (111) expr2 -> . expr DIV expr
    (112) expr2 -> . expr DOT expr
    (113) expr2 -> . expr DOTDIV expr
    (114) expr2 -> . expr DOTEXP expr
    (115) expr2 -> . expr DOTMUL expr
    (116) expr2 -> . expr EQUALEQUAL expr
    (117) expr2 -> . expr EXP expr
    (118) expr2 -> . expr GREATEREQUAL expr
    (119) expr2 -> . expr GREATERTHAN expr
    (120) expr2 -> . expr LESSEQUAL expr
    (121) expr2 -> . expr LESSTHAN expr
    (122) expr2 -> . expr MINUS expr
    (123) expr2 -> . expr TIMES expr
    (124) expr2 -> . expr NOTEQUAL expr
    (125) expr2 -> . expr OR expr
    (126) expr2 -> . expr OROR expr
    (127) expr2 -> . expr PLUS expr
    (128) expr2 -> . expr EQUALS expr
    (129) expr2 -> . expr OREQUALS expr
    (88) expr1 -> . MINUS expr
    (89) expr1 -> . PLUS expr
    (90) expr1 -> . NOTEQUAL expr

    END             shift and go to state 138
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 36
    GLOBAL          shift and go to state 23
    IDENTIFIER      shift and go to state 46
    FOR             shift and go to state 24
    IF              shift and go to state 37
    SEMI            shift and go to state 33
    COMMA           shift and go to state 10
    RETURN          shift and go to state 34
    SWITCH          shift and go to state 35
    TRY             shift and go to state 8
    WHILE           shift and go to state 9
    NOTEQUAL        shift and go to state 40
    NOT             shift and go to state 21
    LBRACKET        shift and go to state 39
    NUMBER          shift and go to state 20
    STRING          shift and go to state 25
    COLON           shift and go to state 28
    LBRACE          shift and go to state 15
    MINUS           shift and go to state 26
    PLUS            shift and go to state 19

    end                            shift and go to state 237
    expr                           shift and go to state 1
    colon                          shift and go to state 16
    cellarray                      shift and go to state 3
    exprs                          shift and go to state 2
    expr2                          shift and go to state 29
    for_stmt                       shift and go to state 7
    global_stmt                    shift and go to state 30
    number                         shift and go to state 31
    break_stmt                     shift and go to state 4
    return_stmt                    shift and go to state 5
    try_catch                      shift and go to state 32
    command                        shift and go to state 17
    expr_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    stmt                           shift and go to state 75
    continue_stmt                  shift and go to state 42
    string                         shift and go to state 38
    while_stmt                     shift and go to state 18
    switch_stmt                    shift and go to state 41
    null_stmt                      shift and go to state 44
    expr1                          shift and go to state 43
    expr_list                      shift and go to state 22
    matrix                         shift and go to state 45

state 234

    (38) case_list -> CASE expr error stmt_list_opt case_list .

    END             reduce using rule 38 (case_list -> CASE expr error stmt_list_opt case_list .)


state 235

    (37) case_list -> CASE expr sep stmt_list_opt case_list .

    END             reduce using rule 37 (case_list -> CASE expr sep stmt_list_opt case_list .)


state 236

    (70) elseif_stmt -> ELSEIF expr sep stmt_list_opt . elseif_stmt
    (68) elseif_stmt -> .
    (69) elseif_stmt -> . ELSE stmt_list_opt
    (70) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt

    END             reduce using rule 68 (elseif_stmt -> .)
    ELSE            shift and go to state 213
    ELSEIF          shift and go to state 212

    elseif_stmt                    shift and go to state 238

state 237

    (72) for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .

    CATCH           reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    END             reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    CONTINUE        reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    BREAK           reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    GLOBAL          reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    IDENTIFIER      reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    FOR             reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    IF              reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    SEMI            reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    COMMA           reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    RETURN          reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    SWITCH          reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    TRY             reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    WHILE           reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    NOTEQUAL        reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    NOT             reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    LBRACKET        reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    NUMBER          reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    STRING          reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    COLON           reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    LBRACE          reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    MINUS           reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    PLUS            reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    ELSE            reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    ELSEIF          reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    FUNCTION        reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    $end            reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    CASE            reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)
    OTHERWISE       reduce using rule 72 (for_stmt -> FOR LBRACKET IDENTIFIER EQUALS expr RBRACKET SEMI stmt_list end .)


state 238

    (70) elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt .

    END             reduce using rule 70 (elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACKET in state 97 resolved as shift
